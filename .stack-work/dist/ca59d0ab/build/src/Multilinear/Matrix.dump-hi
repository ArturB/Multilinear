
==================== FINAL INTERFACE ====================
2017-03-08 11:51:16.2302132 UTC

interface Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.Matrix [hpc] 8002
  interface hash: d761ea832fa05631bec1f2a2dace26df
  ABI hash: beb235e10dd309a59698bb4f30a63383
  export-list hash: cd679beb18bc1209b0ba841c17d694e9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cdec9b8537761099e1856f370e63f4f5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Multilinear.Matrix.elm
  Multilinear.Matrix.matrix
module dependencies: Multilinear.Index Multilinear.ListTensor
                     Multilinear.Operations
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  Multilinear.Index 96f5eab2d014ca17efdb25c1b12aea1e
  Contravariant f35df31575f7fffe0ff0a88179e1b103
  Covariant c34f217e53acac5f1d202abf0ffbb9f5
import  -/  Multilinear.ListTensor 1aa12da4311c717d52523d414dc255b7
  exports: 21ba8672b49c8e662b8221a66ae7512b
  Scalar 330e8ae5b25ead09b72c2a1705110684
  Tensor cb3f0a9dd6551b554c4574073259d366
  Tensor 2865e39650f0269bce86f81a7bc8be88
  scalarVal 2ba1d1e3c5c7cfc4b3bfda10cce3d19e
import  -/  Multilinear.Operations 8ab6bc0011c3314e3da12bcb094dccf6
  ! fbc3c2792ed61413eb86c828f23edd52
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
522c944b012c5b6e4932afe0d7d94f47
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Multilinear.Matrix.$trModule2
                   Multilinear.Matrix.$trModule1) -}
64f8ac90b77308fbca506f6adc2d8416
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Multilinear.Matrix"#) -}
a4a96a643a3437fed9ff21237a3bbae6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU"#) -}
b10dd19f9a4a859cb30ebddbbe751c1a
  $wmatrix ::
    GHC.Real.Integral i =>
    [GHC.Types.Char]
    -> i -> i -> (i -> i -> a) -> Multilinear.ListTensor.Tensor i a
  {- Arity: 1, Strictness: <L,U(1*U,1*U,A,A,A,A,A,A,A)>,
     Inline: [0] -}
bffbfff29254d738d99c650ee625db09
  elm ::
    GHC.Real.Integral i =>
    Multilinear.ListTensor.Tensor i a -> i -> i -> a
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,A,A,A,C(U))><S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ @ i
                   @ a
                   ($dIntegral :: GHC.Real.Integral i)
                   (m :: Multilinear.ListTensor.Tensor i a)
                   (i1 :: i)
                   (i2 :: i) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.Matrix.elm} True True} case i1 of i4 { DEFAULT ->
                                                                                                       case i2 of i5 { DEFAULT ->
                                                                                                       let {
                                                                                                         ds3 :: Multilinear.ListTensor.Tensor
                                                                                                                  i
                                                                                                                  a
                                                                                                         = {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.!} True True} case m of wild {
                                                                                                                                                                                                     Multilinear.ListTensor.Scalar ds5
                                                                                                                                                                                                     -> Multilinear.ListTensor.$fMultilinearTensor7
                                                                                                                                                                                                          @ a
                                                                                                                                                                                                          @ i
                                                                                                                                                                                                     Multilinear.ListTensor.Tensor ds5 ts
                                                                                                                                                                                                     -> case GHC.Integer.Type.integerToInt
                                                                                                                                                                                                               (GHC.Real.toInteger
                                                                                                                                                                                                                  @ i
                                                                                                                                                                                                                  $dIntegral
                                                                                                                                                                                                                  i4) of wild1 { DEFAULT ->
                                                                                                                                                                                                        GHC.List.$w!!
                                                                                                                                                                                                          @ (Multilinear.ListTensor.Tensor
                                                                                                                                                                                                               i
                                                                                                                                                                                                               a)
                                                                                                                                                                                                          ts
                                                                                                                                                                                                          wild1 }
                                                                                                                                                                                                     Multilinear.ListTensor.Err msg
                                                                                                                                                                                                     -> wild }
                                                                                                       } in
                                                                                                       let {
                                                                                                         ds1 :: Multilinear.ListTensor.Tensor
                                                                                                                  i
                                                                                                                  a
                                                                                                         = {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.!} True True} case ds3 of wild {
                                                                                                                                                                                                     Multilinear.ListTensor.Scalar ds5
                                                                                                                                                                                                     -> Multilinear.ListTensor.$fMultilinearTensor7
                                                                                                                                                                                                          @ a
                                                                                                                                                                                                          @ i
                                                                                                                                                                                                     Multilinear.ListTensor.Tensor ds5 ts
                                                                                                                                                                                                     -> case GHC.Integer.Type.integerToInt
                                                                                                                                                                                                               (GHC.Real.toInteger
                                                                                                                                                                                                                  @ i
                                                                                                                                                                                                                  $dIntegral
                                                                                                                                                                                                                  i5) of wild1 { DEFAULT ->
                                                                                                                                                                                                        GHC.List.$w!!
                                                                                                                                                                                                          @ (Multilinear.ListTensor.Tensor
                                                                                                                                                                                                               i
                                                                                                                                                                                                               a)
                                                                                                                                                                                                          ts
                                                                                                                                                                                                          wild1 }
                                                                                                                                                                                                     Multilinear.ListTensor.Err msg
                                                                                                                                                                                                     -> wild }
                                                                                                       } in
                                                                                                       {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.scalarVal} True True} case ds1 of wild {
                                                                                                                                                                                                         DEFAULT
                                                                                                                                                                                                         -> Multilinear.ListTensor.scalarVal1
                                                                                                                                                                                                              @ a
                                                                                                                                                                                                         Multilinear.ListTensor.Scalar ds4
                                                                                                                                                                                                         -> ds4 } } }) -}
334d7228a33773daa372a2c8a824cce3
  matrix ::
    (GHC.Show.Show i, GHC.Real.Integral i) =>
    GHC.Base.String
    -> i -> i -> (i -> i -> a) -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, Strictness: <L,A><L,U(1*U,1*U,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ i @ a (w :: GHC.Show.Show i) (w1 :: GHC.Real.Integral i) ->
                 Multilinear.Matrix.$wmatrix @ i @ a w1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

