
==================== FINAL INTERFACE ====================
2017-03-07 11:57:16.7276709 UTC

interface Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.Index 8002
  interface hash: c919fa528ad9d4d5d511f272e3ad059f
  ABI hash: ff73d2761af0be0de22b54b7d68b02b1
  export-list hash: 480060e0b08455ffef717b127d57d7f9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d421a442bac5348a67fd3f91398c6034
  sig of: Nothing
  used TH splices: False
  where
exports:
  Multilinear.Index.!=!
  Multilinear.Index.equivI
  Multilinear.Index.TIndex{Multilinear.Index.Contravariant Multilinear.Index.Covariant Multilinear.Index.Indifferent indexCount indexName}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0*
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary 471a6fe52b2904efddd28a463c9c8819
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Class 26b921856884ebf3fa980365efaa2264
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Get.Internal 8b5079286a0c6818c089632e1030a3ea
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
fixities infixl 6 !=!
79ed98e0d5f11e1d4e005cb01471ead9
  (!=!) ::
    GHC.Classes.Eq i =>
    Multilinear.Index.TIndex i
    -> Multilinear.Index.TIndex i -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True) Multilinear.Index.equivI -}
48f8ee88f7f9a97b4b06621968312cde
  $fBinaryTIndex ::
    Data.Binary.Class.Binary i =>
    Data.Binary.Class.Binary (Multilinear.Index.TIndex i)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U(A,U)),U,A)>m,
     Unfolding: DFun: @ i ($dBinary :: Data.Binary.Class.Binary i).
                  @ (Multilinear.Index.TIndex i)
                  (Multilinear.Index.$fBinaryTIndex8 @ i $dBinary)
                  (Multilinear.Index.$fBinaryTIndex2 @ i $dBinary)
                  (Multilinear.Index.$fBinaryTIndex_$cputList @ i $dBinary) -}
48f8ee88f7f9a97b4b06621968312cde
  $fBinaryTIndex1 ::
    Data.Binary.Class.Binary i =>
    [Multilinear.Index.TIndex i] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(C(U(A,U)),U,A)> -}
48f8ee88f7f9a97b4b06621968312cde
  $fBinaryTIndex2 ::
    Data.Binary.Class.Binary i =>
    Data.Binary.Get.Internal.Get (Multilinear.Index.TIndex i)
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U,A)><S(LLLS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.Index.$fBinaryTIndex3
                  `cast`
                (forall (i :: <*>_N).
                 <Data.Binary.Class.Binary i>_R
                 ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                               <Multilinear.Index.TIndex i>_R)) -}
48f8ee88f7f9a97b4b06621968312cde
  $fBinaryTIndex3 ::
    Data.Binary.Class.Binary i =>
    forall r.
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success (Multilinear.Index.TIndex i) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U,A)><S(LLLS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ i
                   (w :: Data.Binary.Class.Binary i)
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success
                            (Multilinear.Index.TIndex i) r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Multilinear.Index.$wds @ i w @ r ww1 ww2 ww3 ww4 w2 }) -}
d977c5e2cfac144ebb5be598768c22a8
  $fBinaryTIndex4 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r1.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r1
       -> Data.Binary.Get.Internal.Decoder r1
  {- Arity: 3,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r1
                   (ds1 :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds2 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r1)[OneShot] ->
                 case Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                        bss of dt4 { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r1
                   dt4
                   Multilinear.Index.$fBinaryTIndex5 }) -}
75d2a75aef929459d4843b60b8ba6a59
  $fBinaryTIndex5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "not enough bytes"#) -}
9a9e5ea02657c516a2cd0859cc8c8649
  $fBinaryTIndex6 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str1 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str1 of wild2 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case n2 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# dt7 y) of wild4 {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt7))
                   GHC.Types.True
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild2, Data.ByteString.empty) } } }) -}
8496675bccd40d1bdb83b5fb359b796d
  $fBinaryTIndex7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
48f8ee88f7f9a97b4b06621968312cde
  $fBinaryTIndex8 ::
    Data.Binary.Class.Binary i =>
    Multilinear.Index.TIndex i -> Data.Binary.Put.Put
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,U)),A,A)><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ i
                   (w :: Data.Binary.Class.Binary i)
                   (w1 :: Multilinear.Index.TIndex i) ->
                 case Multilinear.Index.$wds1 @ i w w1 of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
48f8ee88f7f9a97b4b06621968312cde
  $fBinaryTIndex_$cputList ::
    Data.Binary.Class.Binary i =>
    [Multilinear.Index.TIndex i] -> Data.Binary.Put.Put
  {- Arity: 1, Strictness: <L,U(C(U(A,U)),U,A)>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.Index.$fBinaryTIndex1 -}
48f8ee88f7f9a97b4b06621968312cde
  $fEqTIndex ::
    GHC.Classes.Eq i => GHC.Classes.Eq (Multilinear.Index.TIndex i)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Unfolding: DFun: @ i ($dEq :: GHC.Classes.Eq i).
                  @ (Multilinear.Index.TIndex i)
                  (Multilinear.Index.$fEqTIndex1 @ i $dEq)
                  (Multilinear.Index.$fEqTIndex_$c/= @ i $dEq) -}
48f8ee88f7f9a97b4b06621968312cde
  $fEqTIndex1 ::
    GHC.Classes.Eq i =>
    Multilinear.Index.TIndex i
    -> Multilinear.Index.TIndex i -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ i
                   ($dEq :: GHC.Classes.Eq i)
                   (ds1 :: Multilinear.Index.TIndex i)
                   (ds2 :: Multilinear.Index.TIndex i) ->
                 case ds1 of wild {
                   Multilinear.Index.Covariant a1 a2
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Multilinear.Index.Covariant b1 b2
                        -> case GHC.Classes.== @ i $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a2 b2 } }
                   Multilinear.Index.Contravariant a1 a2
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Multilinear.Index.Contravariant b1 b2
                        -> case GHC.Classes.== @ i $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a2 b2 } }
                   Multilinear.Index.Indifferent a1 a2
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Multilinear.Index.Indifferent b1 b2
                        -> case GHC.Classes.== @ i $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a2 b2 } } }) -}
48f8ee88f7f9a97b4b06621968312cde
  $fEqTIndex_$c/= ::
    GHC.Classes.Eq i =>
    Multilinear.Index.TIndex i
    -> Multilinear.Index.TIndex i -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ i
                   ($dEq :: GHC.Classes.Eq i)
                   (a :: Multilinear.Index.TIndex i)
                   (b :: Multilinear.Index.TIndex i) ->
                 case a of wild {
                   Multilinear.Index.Covariant a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Multilinear.Index.Covariant b1 b2
                        -> case GHC.Classes.== @ i $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Base.eqString a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } }
                   Multilinear.Index.Contravariant a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Multilinear.Index.Contravariant b1 b2
                        -> case GHC.Classes.== @ i $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Base.eqString a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } }
                   Multilinear.Index.Indifferent a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Multilinear.Index.Indifferent b1 b2
                        -> case GHC.Classes.== @ i $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Base.eqString a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } }) -}
48f8ee88f7f9a97b4b06621968312cde
  $fShowTIndex ::
    GHC.Show.Show i => GHC.Show.Show (Multilinear.Index.TIndex i)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,C(U),A)>m,
     Unfolding: DFun: @ i ($dShow :: GHC.Show.Show i).
                  @ (Multilinear.Index.TIndex i)
                  (Multilinear.Index.$fShowTIndex_$cshowsPrec @ i $dShow)
                  (Multilinear.Index.$fShowTIndex2 @ i $dShow)
                  (Multilinear.Index.$fShowTIndex_$cshowList @ i $dShow) -}
48f8ee88f7f9a97b4b06621968312cde
  $fShowTIndex1 ::
    GHC.Show.Show i => [Multilinear.Index.TIndex i] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><S,1*U><L,U>,
     Unfolding: (\ @ i
                   ($dShow :: GHC.Show.Show i)
                   (ls :: [Multilinear.Index.TIndex i])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Multilinear.Index.TIndex i)
                   (\ (x :: Multilinear.Index.TIndex i)
                      (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Multilinear.Index.$fShowTIndex2 @ i $dShow x)
                      s1)
                   ls
                   s) -}
48f8ee88f7f9a97b4b06621968312cde
  $fShowTIndex2 ::
    GHC.Show.Show i => Multilinear.Index.TIndex i -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U),A)><S,1*U>,
     Unfolding: (\ @ i
                   ($dShow :: GHC.Show.Show i)
                   (ds1 :: Multilinear.Index.TIndex i) ->
                 case ds1 of wild {
                   Multilinear.Index.Covariant c n
                   -> GHC.CString.unpackAppendCString#
                        "["#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           n
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ i $dShow c)
                                 Multilinear.Index.$fShowTIndex5)))
                   Multilinear.Index.Contravariant c n
                   -> GHC.CString.unpackAppendCString#
                        "<"#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           n
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ i $dShow c)
                                 Multilinear.Index.$fShowTIndex4)))
                   Multilinear.Index.Indifferent c n
                   -> GHC.CString.unpackAppendCString#
                        "("#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           n
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ i $dShow c)
                                 Multilinear.Index.$fShowTIndex3))) }) -}
627b6b60670903d5784f8cea024587c5
  $fShowTIndex3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
9a014acfa7fa6107fd750193e2f4183a
  $fShowTIndex4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">"#) -}
c3a14a35e8a729ce33724fdc35117f91
  $fShowTIndex5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "]"#) -}
48f8ee88f7f9a97b4b06621968312cde
  $fShowTIndex6 ::
    GHC.Show.Show i =>
    GHC.Types.Int -> Multilinear.Index.TIndex i -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,1*U(A,1*C1(U),A)><L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ i
                   ($dShow :: GHC.Show.Show i)
                   (ds1 :: GHC.Types.Int)
                   (x :: Multilinear.Index.TIndex i)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Multilinear.Index.$fShowTIndex2 @ i $dShow x))
                   s) -}
48f8ee88f7f9a97b4b06621968312cde
  $fShowTIndex_$cshowList ::
    GHC.Show.Show i => [Multilinear.Index.TIndex i] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.Index.$fShowTIndex1 -}
48f8ee88f7f9a97b4b06621968312cde
  $fShowTIndex_$cshowsPrec ::
    GHC.Show.Show i =>
    GHC.Types.Int -> Multilinear.Index.TIndex i -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,1*U(A,1*C1(U),A)><L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.Index.$fShowTIndex6 -}
cc3b6272fd736bc44c4a93ed653b5f64
  $tc'Contravariant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14950104867859181824##
                   16496283454609232937##
                   Multilinear.Index.$trModule
                   Multilinear.Index.$tc'Contravariant1) -}
3c500a25088f83fc9b3a66e81feb7551
  $tc'Contravariant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Contravariant"#) -}
7bc9ca56979e3527c4a420084468fcab
  $tc'Covariant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8282916689384128496##
                   4904319540750030692##
                   Multilinear.Index.$trModule
                   Multilinear.Index.$tc'Covariant1) -}
74e60959c66337549471471b62d1aacb
  $tc'Covariant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Covariant"#) -}
7f8e9445fa8c1cafdbd47d5db23f415a
  $tc'Indifferent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9092325581921848415##
                   14435452753637195572##
                   Multilinear.Index.$trModule
                   Multilinear.Index.$tc'Indifferent1) -}
eebd647f7057a32193a1fc27d77d6634
  $tc'Indifferent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Indifferent"#) -}
0661f45945f1b415639fb1e8765a7d2b
  $tcTIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16632130136056264332##
                   11316679002100542256##
                   Multilinear.Index.$trModule
                   Multilinear.Index.$tcTIndex1) -}
11889205a8f8e662b3c8995f8ecf3e6e
  $tcTIndex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TIndex"#) -}
7fc9707207914b6488b50a595a354e14
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Multilinear.Index.$trModule2
                   Multilinear.Index.$trModule1) -}
1bdfc08cc2be510577ea15a032f5ac98
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Multilinear.Index"#) -}
8bc84a5c6513f6b72549eaac24984659
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU"#) -}
48f8ee88f7f9a97b4b06621968312cde
  $wds ::
    Data.Binary.Class.Binary i =>
    forall r.
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success (Multilinear.Index.TIndex i) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 6,
     Strictness: <L,1*U(A,1*U,A)><L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ i
                   (w :: Data.Binary.Class.Binary i)
                   @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: Data.Binary.Get.Internal.Success
                            (Multilinear.Index.TIndex i) r) ->
                 let {
                   lvl :: Data.Binary.Get.Internal.Get i = Data.Binary.Class.get @ i w
                 } in
                 let {
                   $weta1 :: Data.ByteString.Internal.ByteString
                             -> GHC.Prim.Word# -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
                   = \ (w2 :: Data.ByteString.Internal.ByteString)
                       (ww4 :: GHC.Prim.Word#)[OneShot] ->
                     lvl `cast` (Data.Binary.Get.Internal.N:Get[0] <i>_R)
                       @ r
                       w2
                       (\ (i' :: Data.ByteString.Internal.ByteString) (a1 :: i) ->
                        case a1 of c { DEFAULT ->
                        case i' of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                        Data.Binary.Class.$w$cget10
                          @ GHC.Types.Char
                          Data.Binary.Class.$fBinaryChar
                          @ r
                          ww6
                          ww7
                          ww8
                          ww9
                          (\ (i'1 :: Data.ByteString.Internal.ByteString)
                             (a2 :: GHC.Base.String)[OneShot] ->
                           case a2 of n { DEFAULT ->
                           case ww4 of wild {
                             DEFAULT -> w1 i'1 (Multilinear.Index.Contravariant @ i c n)
                             0## -> w1 i'1 (Multilinear.Index.Covariant @ i c n) } }) } })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww3 1#) of wild1 {
                   GHC.Types.False
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Multilinear.Index.$fBinaryTIndex7
                        Multilinear.Index.$fBinaryTIndex6
                        Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                        Multilinear.Index.$fBinaryTIndex4
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $weta1
                           (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           ipv1 } } })
                   GHC.Types.True
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $weta1
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        ipv1 } } }) -}
48f8ee88f7f9a97b4b06621968312cde
  $wds1 ::
    Data.Binary.Class.Binary i =>
    Multilinear.Index.TIndex i
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U(A,U)),A,A)><S,1*U>, Inline: [0] -}
48f8ee88f7f9a97b4b06621968312cde
  data TIndex i
    = Covariant {indexCount :: !i, indexName :: !GHC.Base.String}
    | Contravariant {indexCount :: !i, indexName :: !GHC.Base.String}
    | Indifferent {indexCount :: !i, indexName :: !GHC.Base.String}
7e19baab020695e36b536396a839a761
  equivI ::
    GHC.Classes.Eq i =>
    Multilinear.Index.TIndex i
    -> Multilinear.Index.TIndex i -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ i
                   ($dEq :: GHC.Classes.Eq i)
                   (ds1 :: Multilinear.Index.TIndex i)
                   (ds2 :: Multilinear.Index.TIndex i) ->
                 case ds1 of wild {
                   Multilinear.Index.Covariant count1 ds3
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Multilinear.Index.Covariant count2 ds4
                        -> GHC.Classes.== @ i $dEq count1 count2 }
                   Multilinear.Index.Contravariant count1 ds3
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Multilinear.Index.Contravariant count2 ds4
                        -> GHC.Classes.== @ i $dEq count1 count2 }
                   Multilinear.Index.Indifferent count1 ds3
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Multilinear.Index.Indifferent count2 ds4
                        -> GHC.Classes.== @ i $dEq count1 count2 } }) -}
49c023e428a00d7dca1693a4affbb696
  indexCount :: Multilinear.Index.TIndex i -> i
  RecSel Left Multilinear.Index.TIndex
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ i (ds1 :: Multilinear.Index.TIndex i) ->
                 case ds1 of wild {
                   Multilinear.Index.Covariant ds2 ds3 -> ds2
                   Multilinear.Index.Contravariant ds2 ds3 -> ds2
                   Multilinear.Index.Indifferent ds2 ds3 -> ds2 }) -}
13bb28b4dd79fe499c2d343e0b2cd53b
  indexName :: Multilinear.Index.TIndex i -> GHC.Base.String
  RecSel Left Multilinear.Index.TIndex
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ i (ds1 :: Multilinear.Index.TIndex i) ->
                 case ds1 of wild {
                   Multilinear.Index.Covariant ds2 ds3 -> ds3
                   Multilinear.Index.Contravariant ds2 ds3 -> ds3
                   Multilinear.Index.Indifferent ds2 ds3 -> ds3 }) -}
instance [safe] Data.Binary.Class.Binary [Multilinear.Index.TIndex]
  = Multilinear.Index.$fBinaryTIndex
instance [safe] GHC.Classes.Eq [Multilinear.Index.TIndex]
  = Multilinear.Index.$fEqTIndex
instance [safe] GHC.Show.Show [Multilinear.Index.TIndex]
  = Multilinear.Index.$fShowTIndex
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

