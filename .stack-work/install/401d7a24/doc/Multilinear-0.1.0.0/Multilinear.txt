-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Calculations of tensors
--   
--   Please see README.md
@package Multilinear
@version 0.1.0.0


module Multilinear.Vector

-- | Vector datatype
data V a
[V] :: String -> ([Int] -> a) -> V a


module Multilinear.Tensor

-- | Tensor datatype
data T a
[T] :: String -> String -> ([Int] -> [Int] -> a) -> T a

-- | Tensor component
el :: T a -> ([Int] -> [Int] -> a)

-- | Returns tensor indices
ind :: T a -> (String, String)
instance GHC.Num.Num a => GHC.Num.Num (Multilinear.Tensor.T a)

module Multilinear.Restricted


module Multilinear.Index

-- | TENSOR INDEX
data TIndex
Covariant :: Int -> String -> TIndex
[indexCount] :: TIndex -> Int
[indexName] :: TIndex -> String
Contravariant :: Int -> String -> TIndex
[indexCount] :: TIndex -> Int
[indexName] :: TIndex -> String
Indifferent :: Int -> String -> TIndex
[indexCount] :: TIndex -> Int
[indexName] :: TIndex -> String

-- | Returns true if two indices are quivalent, i.e. differs only by name
equivI :: TIndex -> TIndex -> Bool

-- | Infix equivalent of equiv
(!=!) :: TIndex -> TIndex -> Bool
infixl 6 !=!
instance GHC.Classes.Eq Multilinear.Index.TIndex
instance Data.Binary.Class.Binary Multilinear.Index.TIndex
instance GHC.Show.Show Multilinear.Index.TIndex


module Multilinear.Covector

-- | Covector datatype
data T_ a
[T_] :: String -> ([Int] -> a) -> T_ a


-- | Defines main tyclasses to deal with multilinear algebra and re-exports
--   content of other library modules.
module Multilinear

-- | MULTILINEAR CLASS - TENSOR DEFINED AS MULTILINEAR MAP
class Multilinear t

-- | Tensor sum
(!+) :: Multilinear t => t -> t -> t

-- | Tensor difference
(!-) :: Multilinear t => t -> t -> t

-- | Tensor product satisfying Einstein summation convention
(!*) :: Multilinear t => t -> t -> t

-- | TENSOR CLASS - TENSOR AS MULTIDIMENSIONAL ARRAY
class Num t => Tensor t

-- | Generate tensor elements as a function of indices
generate :: Tensor t => TIndex -> (Int -> t) -> t

-- | generate rank tensor from a list
fromList :: Tensor t => TIndex -> [a] -> t

-- | Tensor order (contravariant, covariant)
order :: Tensor t => t -> (Int, Int)

-- | Number of tensor elements
elems :: Tensor t => t -> Int

-- | List of tensor indices
indices :: Tensor t => t -> [TIndex]

-- | Rename tensor index
rename :: Tensor t => t -> String -> String -> t

-- | Check if tensors are equivalent (are of the same type and size)
equiv :: Tensor t => t -> t -> Bool

-- | switch all indices type
transpose :: Tensor t => t -> t

-- | switch only one index type
transpose1 :: Tensor t => t -> t

-- | concatenation of two tensor with given index or by creating a new one
concat :: Tensor t => TIndex -> t -> t -> t
