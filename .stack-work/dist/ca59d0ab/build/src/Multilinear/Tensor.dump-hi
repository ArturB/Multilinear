
==================== FINAL INTERFACE ====================
2017-03-06 10:45:31.5134274 UTC

interface Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.Tensor 8002
  interface hash: c1eed9451393a5ebf039a119f0adf140
  ABI hash: 75e11aad3eea5bcf8293fe821ccd8ecf
  export-list hash: 8af8c38bff9a54c2d3a9a5684c00ef9e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0a867a4eb71687b8f77180a0cef6e55a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Multilinear.Tensor.el
  Multilinear.Tensor.ind
  Multilinear.Tensor.T{Multilinear.Tensor.T}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
fa4462091453093449bc613b9c2009b5
  $fNumT :: GHC.Num.Num a => GHC.Num.Num (Multilinear.Tensor.T a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(C1(U)),C(C1(U)),C(C1(U)),A,C(U),C(U),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dNum :: GHC.Num.Num a).
                  @ (Multilinear.Tensor.T a)
                  (Multilinear.Tensor.$fNumT_$c+ @ a $dNum)
                  (Multilinear.Tensor.$fNumT_$c- @ a $dNum)
                  (Multilinear.Tensor.$fNumT_$c* @ a $dNum)
                  (Multilinear.Tensor.$fNumT_$cnegate @ a $dNum)
                  (Multilinear.Tensor.$fNumT_$cabs @ a $dNum)
                  (Multilinear.Tensor.$fNumT_$csignum @ a $dNum)
                  (Multilinear.Tensor.$fNumT_$cfromInteger @ a $dNum) -}
fa4462091453093449bc613b9c2009b5
  $fNumT1 :: GHC.Integer.Type.Integer -> Multilinear.Tensor.T a
  {- Strictness: x -}
fa4462091453093449bc613b9c2009b5
  $fNumT2 :: Multilinear.Tensor.T a
  {- Strictness: x -}
fa4462091453093449bc613b9c2009b5
  $fNumT3 :: Multilinear.Tensor.T a
  {- Strictness: x -}
fa4462091453093449bc613b9c2009b5
  $fNumT_$c* ::
    GHC.Num.Num a =>
    Multilinear.Tensor.T a
    -> Multilinear.Tensor.T a -> Multilinear.Tensor.T a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><S,1*U(U,U,C(C1(U)))><S,1*U(1*U,1*U,C(C1(U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Tensor.T a)
                   (w2 :: Multilinear.Tensor.T a) ->
                 case w1 of ww { Multilinear.Tensor.T ww1 ww2 ww3 ->
                 case w2 of ww4 { Multilinear.Tensor.T ww5 ww6 ww7 ->
                 case Multilinear.Tensor.$w$c*
                        @ a
                        w
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Multilinear.Tensor.T @ a ww9 ww10 ww11 } } }) -}
fa4462091453093449bc613b9c2009b5
  $fNumT_$c+ ::
    GHC.Num.Num a =>
    Multilinear.Tensor.T a
    -> Multilinear.Tensor.T a -> Multilinear.Tensor.T a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><S(SSL),1*U(U,U,C(C1(U)))><S(SSL),1*U(1*U,1*U,C(C1(U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Tensor.T a)
                   (w2 :: Multilinear.Tensor.T a) ->
                 case w1 of ww { Multilinear.Tensor.T ww1 ww2 ww3 ->
                 case w2 of ww4 { Multilinear.Tensor.T ww5 ww6 ww7 ->
                 case Multilinear.Tensor.$w$c+
                        @ a
                        w
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Multilinear.Tensor.T @ a ww9 ww10 ww11 } } }) -}
fa4462091453093449bc613b9c2009b5
  $fNumT_$c- ::
    GHC.Num.Num a =>
    Multilinear.Tensor.T a
    -> Multilinear.Tensor.T a -> Multilinear.Tensor.T a
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A)><S(SSL),1*U(U,U,C(C1(U)))><S(SSL),1*U(1*U,1*U,C(C1(U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Tensor.T a)
                   (w2 :: Multilinear.Tensor.T a) ->
                 case w1 of ww { Multilinear.Tensor.T ww1 ww2 ww3 ->
                 case w2 of ww4 { Multilinear.Tensor.T ww5 ww6 ww7 ->
                 case Multilinear.Tensor.$w$c-
                        @ a
                        w
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Multilinear.Tensor.T @ a ww9 ww10 ww11 } } }) -}
fa4462091453093449bc613b9c2009b5
  $fNumT_$cabs ::
    GHC.Num.Num a => Multilinear.Tensor.T a -> Multilinear.Tensor.T a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,C(U),A,A)><S,1*U(U,U,C(C1(U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Multilinear.Tensor.T a) ->
                 case w1 of ww { Multilinear.Tensor.T ww1 ww2 ww3 ->
                 Multilinear.Tensor.T
                   @ a
                   ww1
                   ww2
                   (\ (ul :: [GHC.Types.Int]) (dl :: [GHC.Types.Int]) ->
                    GHC.Num.abs @ a w (ww3 ul dl)) }) -}
fa4462091453093449bc613b9c2009b5
  $fNumT_$cfromInteger ::
    GHC.Num.Num a => GHC.Integer.Type.Integer -> Multilinear.Tensor.T a
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Multilinear.Tensor.$fNumT1 @ a) -}
fa4462091453093449bc613b9c2009b5
  $fNumT_$cnegate ::
    GHC.Num.Num a => Multilinear.Tensor.T a -> Multilinear.Tensor.T a
  {- Arity: 2,
     Strictness: <L,U(C(C1(U)),C(C1(U)),C(C1(U)),A,C(U),C(U),A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: Multilinear.Tensor.T a) ->
                 case Multilinear.Tensor.$fNumT_$cfromInteger @ a $dNum
                 ret_ty (Multilinear.Tensor.T a)
                 of {}) -}
fa4462091453093449bc613b9c2009b5
  $fNumT_$csignum ::
    GHC.Num.Num a => Multilinear.Tensor.T a -> Multilinear.Tensor.T a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,C(U),A)><S,1*U(U,U,C(C1(U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Multilinear.Tensor.T a) ->
                 case w1 of ww { Multilinear.Tensor.T ww1 ww2 ww3 ->
                 Multilinear.Tensor.T
                   @ a
                   ww1
                   ww2
                   (\ (ul :: [GHC.Types.Int]) (dl :: [GHC.Types.Int]) ->
                    GHC.Num.signum @ a w (ww3 ul dl)) }) -}
b7bc1405df4bf88a57bf3d2502e5dd8b
  $tc'T :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17432937748411218507##
                   15547260522013430427##
                   Multilinear.Tensor.$trModule
                   Multilinear.Tensor.$tc'T1) -}
57709b36138055d25dffcb1df85a2b96
  $tc'T1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'T"#) -}
41999e5fa181876a88623d70bd354978
  $tcT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4174154251826045021##
                   3864233149767757940##
                   Multilinear.Tensor.$trModule
                   Multilinear.Tensor.$tcT1) -}
1c3039982384f460b1674c959a94a361
  $tcT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "T"#) -}
740a9f88a128fa3b9f698f7d317b1013
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Multilinear.Tensor.$trModule2
                   Multilinear.Tensor.$trModule1) -}
5e3069510f3f997bd952796db525b688
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Multilinear.Tensor"#) -}
c02d74ece54831f0c019ca8f0edf7987
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU"#) -}
6f7a767cb15451f18a68434ed673c9c9
  $w$c* ::
    GHC.Num.Num a =>
    GHC.Base.String
    -> GHC.Base.String
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> a)
    -> GHC.Base.String
    -> GHC.Base.String
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> a)
    -> (# GHC.Base.String, GHC.Base.String,
          [GHC.Types.Int] -> [GHC.Types.Int] -> a #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><L,U><L,U><L,C(C1(U))><L,1*U><L,1*U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: [GHC.Types.Int] -> [GHC.Types.Int] -> a)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: [GHC.Types.Int] -> [GHC.Types.Int] -> a) ->
                 let {
                   lvl14 :: GHC.Types.Int
                   = case GHC.List.$wlenAcc
                            @ GHC.Types.Char
                            ww1
                            0# of ww6 { DEFAULT ->
                     GHC.Types.I# ww6 }
                 } in
                 let {
                   lvl15 :: GHC.Types.Int
                   = case GHC.List.$wlenAcc @ GHC.Types.Char ww 0# of ww6 { DEFAULT ->
                     GHC.Types.I# ww6 }
                 } in
                 let {
                   lvl16 :: GHC.Types.Bool
                   = case lvl15 of wild1 { GHC.Types.I# y ->
                     GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# 0# y) }
                 } in
                 let {
                   lvl17 :: GHC.Types.Bool
                   = case lvl14 of wild1 { GHC.Types.I# y ->
                     GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# 0# y) }
                 } in
                 (# GHC.Base.++ @ GHC.Types.Char ww ww3,
                    GHC.Base.++ @ GHC.Types.Char ww1 ww4,
                    \ (ul :: [GHC.Types.Int]) (dl :: [GHC.Types.Int]) ->
                    GHC.Num.*
                      @ a
                      w
                      (ww2
                         (case lvl16 of wild {
                            GHC.Types.False -> GHC.Types.[] @ GHC.Types.Int
                            GHC.Types.True
                            -> case lvl15 of ww6 { GHC.Types.I# ww7 ->
                               GHC.List.$wunsafeTake @ GHC.Types.Int ww7 ul } })
                         (case lvl17 of wild {
                            GHC.Types.False -> GHC.Types.[] @ GHC.Types.Int
                            GHC.Types.True
                            -> case lvl14 of ww6 { GHC.Types.I# ww7 ->
                               GHC.List.$wunsafeTake @ GHC.Types.Int ww7 dl } }))
                      (ww5
                         (case lvl15 of wild { GHC.Types.I# x ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# x 0#) of wild1 {
                            GHC.Types.False
                            -> Multilinear.Tensor.$wunsafeDrop1 @ GHC.Types.Int x ul
                            GHC.Types.True -> ul } })
                         (case lvl14 of wild { GHC.Types.I# x ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# x 0#) of wild1 {
                            GHC.Types.False
                            -> Multilinear.Tensor.$wunsafeDrop @ GHC.Types.Int x dl
                            GHC.Types.True -> dl } })) #)) -}
fa4462091453093449bc613b9c2009b5
  $w$c+ ::
    GHC.Num.Num a =>
    GHC.Base.String
    -> GHC.Base.String
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> a)
    -> GHC.Base.String
    -> GHC.Base.String
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> a)
    -> (# GHC.Base.String, GHC.Base.String,
          [GHC.Types.Int] -> [GHC.Types.Int] -> a #)
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><S,U><S,U><L,C(C1(U))><S,1*U><S,1*U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: [GHC.Types.Int] -> [GHC.Types.Int] -> a)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: [GHC.Types.Int] -> [GHC.Types.Int] -> a) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False
                   -> case Multilinear.Tensor.$fNumT3
                      ret_ty (# GHC.Base.String, GHC.Base.String,
                                [GHC.Types.Int] -> [GHC.Types.Int] -> a #)
                      of {}
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww4 of wild1 {
                        GHC.Types.False
                        -> case Multilinear.Tensor.$fNumT3
                           ret_ty (# GHC.Base.String, GHC.Base.String,
                                     [GHC.Types.Int] -> [GHC.Types.Int] -> a #)
                           of {}
                        GHC.Types.True
                        -> (# ww, ww1,
                              \ (ul :: [GHC.Types.Int]) (dl :: [GHC.Types.Int]) ->
                              GHC.Num.+ @ a w (ww2 ul dl) (ww5 ul dl) #) } }) -}
fa4462091453093449bc613b9c2009b5
  $w$c- ::
    GHC.Num.Num a =>
    GHC.Base.String
    -> GHC.Base.String
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> a)
    -> GHC.Base.String
    -> GHC.Base.String
    -> ([GHC.Types.Int] -> [GHC.Types.Int] -> a)
    -> (# GHC.Base.String, GHC.Base.String,
          [GHC.Types.Int] -> [GHC.Types.Int] -> a #)
  {- Arity: 7,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A)><S,U><S,U><L,C(C1(U))><S,1*U><S,1*U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: [GHC.Types.Int] -> [GHC.Types.Int] -> a)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: [GHC.Types.Int] -> [GHC.Types.Int] -> a) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False
                   -> case Multilinear.Tensor.$fNumT2
                      ret_ty (# GHC.Base.String, GHC.Base.String,
                                [GHC.Types.Int] -> [GHC.Types.Int] -> a #)
                      of {}
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww4 of wild1 {
                        GHC.Types.False
                        -> case Multilinear.Tensor.$fNumT2
                           ret_ty (# GHC.Base.String, GHC.Base.String,
                                     [GHC.Types.Int] -> [GHC.Types.Int] -> a #)
                           of {}
                        GHC.Types.True
                        -> (# ww, ww1,
                              \ (ul :: [GHC.Types.Int]) (dl :: [GHC.Types.Int]) ->
                              GHC.Num.- @ a w (ww2 ul dl) (ww5 ul dl) #) } }) -}
d5a55d781a14e283a1e3d2a66af7eaf8
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
ca496058629f97bb77aa85d8e43f53ed
  $wunsafeDrop1 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
fa4462091453093449bc613b9c2009b5
  data T a where
    T :: GHC.Base.String -> GHC.Base.String
         -> ([GHC.Types.Int] -> [GHC.Types.Int] -> a) -> T a
d9f74ee195933395a67aef197cd0cbad
  el ::
    Multilinear.Tensor.T a -> [GHC.Types.Int] -> [GHC.Types.Int] -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Tensor.T a) ->
                 case ds of wild { Multilinear.Tensor.T ds1 ds2 f -> f }) -}
8995e7a9abc7224523ee799944cf3dd7
  ind :: Multilinear.Tensor.T a -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Tensor.T a) ->
                 case ds of wild { Multilinear.Tensor.T us ds1 ds2 ->
                 (us, ds1) }) -}
instance [safe] GHC.Num.Num [Multilinear.Tensor.T]
  = Multilinear.Tensor.$fNumT
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

