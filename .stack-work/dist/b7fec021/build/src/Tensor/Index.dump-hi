
==================== FINAL INTERFACE ====================
2017-01-18 21:56:28.8048448 UTC

interface Tensor-0.1.0.0-K5QdifOX00t2w9C27ImRWh:Tensor.Index 8001
  interface hash: 32eae28fe81078d2770dc79312d00bdb
  ABI hash: 6bdc44f3d1849d0934612a9de4da6cc7
  export-list hash: 3e404e500ff97a25d44a7567729a4ffe
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 11c1d53d86ff1fc48fbbf191e9636203
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tensor.Index.!=!
  Tensor.Index.equivI
  Tensor.Index.TIndex{Tensor.Index.Contravariant Tensor.Index.Covariant Tensor.Index.Indifferent indexCount indexName}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0*
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary 6874ec1640b9c9e26e0b523287f2c847
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Class 8597f8b1c2ab4e12727292e0fd7fcc19
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Get.Internal 2e7605525151d1d4905dbc0c729d189c
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
fixities infixl 6 !=!
21cbcdd3bcb65f4efd82eb790d1c7ae5
  (!=!) ::
    Tensor.Index.TIndex -> Tensor.Index.TIndex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True) Tensor.Index.equivI -}
2caa73acff6840ac777cf2a549dfd2e0
  $fBinaryTIndex :: Data.Binary.Class.Binary Tensor.Index.TIndex
  DFunId
  {- Strictness: m,
     Unfolding: DFun:.
                  @ Tensor.Index.TIndex
                  Tensor.Index.$fBinaryTIndex_$cput
                  Tensor.Index.$fBinaryTIndex_$cget
                  Tensor.Index.$fBinaryTIndex1 -}
2caa73acff6840ac777cf2a549dfd2e0
  $fBinaryTIndex1 :: [Tensor.Index.TIndex] -> Data.Binary.Put.Put
  {- Arity: 1 -}
2caa73acff6840ac777cf2a549dfd2e0
  $fBinaryTIndex2 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Tensor.Index.TIndex r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(LLLS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Tensor.Index.TIndex r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Tensor.Index.$w$cget @ r ww1 ww2 ww3 ww4 w1 }) -}
1a9096d2c19b3948081dd0b2822c0d55
  $fBinaryTIndex3 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r1.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r1
       -> Data.Binary.Get.Internal.Decoder r1
  {- Arity: 3,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r1
                   (ds1 :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds2 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r1)[OneShot] ->
                 case Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                        bss of dt4 { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r1
                   dt4
                   Tensor.Index.$fBinaryTIndex4 }) -}
881f4d771c4387df18d1ff4dfa77798b
  $fBinaryTIndex4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "not enough bytes"#) -}
f1baccdabf8ff52a8c1500bb1ca1b4d2
  $fBinaryTIndex5 ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2,
     Unfolding: (\ (n2 :: GHC.Types.Int)
                   (str1 :: Data.ByteString.Internal.ByteString)[OneShot] ->
                 case str1 of wild2 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                 case n2 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# dt7 y) of wild4 {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt7))
                   GHC.Types.True
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild2, Data.ByteString.empty) } } }) -}
c29c5125aaf25a5f64c798fcfd8754ad
  $fBinaryTIndex6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fBinaryTIndex_$cget ::
    Data.Binary.Get.Internal.Get Tensor.Index.TIndex
  {- Arity: 2, Strictness: <S(LLLS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Tensor.Index.$fBinaryTIndex2
                  `cast`
                (Sym (Data.Binary.Get.Internal.N:Get[0]
                          <Tensor.Index.TIndex>_R)) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fBinaryTIndex_$cput :: Tensor.Index.TIndex -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tensor.Index.TIndex) ->
                 case Tensor.Index.$w$cput w of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fEqTIndex :: GHC.Classes.Eq Tensor.Index.TIndex
  DFunId
  {- HasNoCafRefs, Strictness: m,
     Unfolding: DFun:.
                  @ Tensor.Index.TIndex
                  Tensor.Index.$fEqTIndex_$c==
                  Tensor.Index.$fEqTIndex1 -}
2caa73acff6840ac777cf2a549dfd2e0
  $fEqTIndex1 ::
    Tensor.Index.TIndex -> Tensor.Index.TIndex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Tensor.Index.TIndex)
                   (b :: Tensor.Index.TIndex) ->
                 case a of wild {
                   Tensor.Index.Covariant dt a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Tensor.Index.Covariant dt1 b2
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt dt1) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Base.eqString a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } }
                   Tensor.Index.Contravariant dt a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Tensor.Index.Contravariant dt1 b2
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt dt1) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Base.eqString a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } }
                   Tensor.Index.Indifferent dt a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Tensor.Index.Indifferent dt1 b2
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt dt1) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Base.eqString a2 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } }) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fEqTIndex_$c== ::
    Tensor.Index.TIndex -> Tensor.Index.TIndex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds1 :: Tensor.Index.TIndex)
                   (ds2 :: Tensor.Index.TIndex) ->
                 case ds1 of wild {
                   Tensor.Index.Covariant dt a2
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Tensor.Index.Covariant dt1 b2
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt dt1) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a2 b2 } }
                   Tensor.Index.Contravariant dt a2
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Tensor.Index.Contravariant dt1 b2
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt dt1) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a2 b2 } }
                   Tensor.Index.Indifferent dt a2
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Tensor.Index.Indifferent dt1 b2
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt dt1) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Base.eqString a2 b2 } } }) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fShowTIndex :: GHC.Show.Show Tensor.Index.TIndex
  DFunId
  {- Strictness: m,
     Unfolding: DFun:.
                  @ Tensor.Index.TIndex
                  Tensor.Index.$fShowTIndex6
                  Tensor.Index.$fShowTIndex_$cshow
                  Tensor.Index.$fShowTIndex1 -}
2caa73acff6840ac777cf2a549dfd2e0
  $fShowTIndex1 :: [Tensor.Index.TIndex] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Tensor.Index.TIndex])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Tensor.Index.TIndex
                   Tensor.Index.$fShowTIndex2
                   ls
                   s) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fShowTIndex2 ::
    Tensor.Index.TIndex -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Tensor.Index.TIndex)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Tensor.Index.$fShowTIndex_$cshow x)
                   s) -}
ef122b08b0a7dc003c7e28ca7f13623c
  $fShowTIndex3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
6a4d66758d92547e460740d12929f946
  $fShowTIndex4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">"#) -}
4c0129f076d068c21c2f4e4b3be14fb9
  $fShowTIndex5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "]"#) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fShowTIndex6 ::
    GHC.Types.Int -> Tensor.Index.TIndex -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds1 :: GHC.Types.Int)
                   (x :: Tensor.Index.TIndex)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Tensor.Index.$fShowTIndex_$cshow x))
                   s) -}
2caa73acff6840ac777cf2a549dfd2e0
  $fShowTIndex_$cshow :: Tensor.Index.TIndex -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds1 :: Tensor.Index.TIndex) ->
                 case ds1 of wild {
                   Tensor.Index.Covariant dt n
                   -> GHC.CString.unpackAppendCString#
                        "["#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           n
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (case GHC.Show.$wshowSignedInt
                                      0#
                                      dt
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                 Tensor.Index.$fShowTIndex5 })))
                   Tensor.Index.Contravariant dt n
                   -> GHC.CString.unpackAppendCString#
                        "<"#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           n
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (case GHC.Show.$wshowSignedInt
                                      0#
                                      dt
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                 Tensor.Index.$fShowTIndex4 })))
                   Tensor.Index.Indifferent dt n
                   -> GHC.CString.unpackAppendCString#
                        "("#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           n
                           (GHC.CString.unpackAppendCString#
                              ":"#
                              (case GHC.Show.$wshowSignedInt
                                      0#
                                      dt
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                 Tensor.Index.$fShowTIndex3 }))) }) -}
5a4b73048d8d116d0d6b3e4dd2bf22aa
  $tc'Contravariant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6928298310663293580##
                   8228533990421324627##
                   Tensor.Index.$trModule
                   Tensor.Index.$tc'Contravariant1) -}
138f3c30451f4ae91f7b9379b9f0c850
  $tc'Contravariant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Contravariant"#) -}
4f0a691fac81d264631266945e6740d8
  $tc'Covariant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16891384111967450814##
                   16968557033313571113##
                   Tensor.Index.$trModule
                   Tensor.Index.$tc'Covariant1) -}
d12df7c7cfebf0843b452d39ba2e6698
  $tc'Covariant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Covariant"#) -}
2b6b19f0381c4cebc5a4fbe70f11c61e
  $tc'Indifferent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8895539339676561956##
                   1376407559151598303##
                   Tensor.Index.$trModule
                   Tensor.Index.$tc'Indifferent1) -}
6488687b2110ea28db2a9d2b8c3a44e2
  $tc'Indifferent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Indifferent"#) -}
7366f3e4a494225c9cbeb59c1be3f53f
  $tcTIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6532425082951295546##
                   7096619072625308010##
                   Tensor.Index.$trModule
                   Tensor.Index.$tcTIndex1) -}
00897643bb661c99d9c40aa381a10d2f
  $tcTIndex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TIndex"#) -}
426f8a70d3f0bace8436218ec3a54f0a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Tensor.Index.$trModule2
                   Tensor.Index.$trModule1) -}
5e4c86cf32d87cb2be8eb410d4427e42
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tensor.Index"#) -}
fa29626887f03fd1c92f94ec60e13227
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Tensor-0.1.0.0-K5QdifOX00t2w9C27ImRWh"#) -}
2caa73acff6840ac777cf2a549dfd2e0
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Tensor.Index.TIndex r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Tensor.Index.TIndex r) ->
                 let {
                   $weta1 :: GHC.Prim.Addr#
                             -> GHC.ForeignPtr.ForeignPtrContents
                             -> GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.Word#
                             -> Data.Binary.Get.Internal.Decoder r
                     {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,U>, Inline: [0] -}
                   = \ (ww4 :: GHC.Prim.Addr#)
                       (ww5 :: GHC.ForeignPtr.ForeignPtrContents)
                       (ww6 :: GHC.Prim.Int#)
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Word#)[OneShot] ->
                     Data.Binary.Class.$w$cget9
                       @ r
                       ww4
                       ww5
                       ww6
                       ww7
                       (\ (i' :: Data.ByteString.Internal.ByteString)
                          (a1 :: GHC.Types.Int)[OneShot] ->
                        case a1 of c { GHC.Types.I# ipv ->
                        case i' of ww9 { Data.ByteString.Internal.PS ww10 ww11 ww12 ww13 ->
                        Data.Binary.Class.$w$cget10
                          @ GHC.Types.Char
                          Data.Binary.Class.$fBinaryChar
                          @ r
                          ww10
                          ww11
                          ww12
                          ww13
                          (\ (i'1 :: Data.ByteString.Internal.ByteString)
                             (a2 :: GHC.Base.String)[OneShot] ->
                           case a2 of n { DEFAULT ->
                           case ww8 of wild {
                             DEFAULT -> w i'1 (Tensor.Index.Contravariant ipv n)
                             0## -> w i'1 (Tensor.Index.Covariant ipv n) } }) } })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww3 1#) of wild1 {
                   GHC.Types.False
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Tensor.Index.$fBinaryTIndex6
                        Tensor.Index.$fBinaryTIndex5
                        Data.ByteString.Internal.$fMonoidByteString_$cmconcat
                        Tensor.Index.$fBinaryTIndex3
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         $weta1 dt dt1 (GHC.Prim.+# dt2 1#) (GHC.Prim.-# dt3 1#) ipv1 } } })
                   GHC.Types.True
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      $weta1
                        ww
                        ww1
                        (GHC.Prim.+# ww2 1#)
                        (GHC.Prim.-# ww3 1#)
                        ipv1 } } }) -}
2caa73acff6840ac777cf2a549dfd2e0
  $w$cput ::
    Tensor.Index.TIndex
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
2caa73acff6840ac777cf2a549dfd2e0
  data TIndex
    = Covariant {indexCount :: {-# UNPACK #-}GHC.Types.Int,
                 indexName :: !GHC.Base.String}
    | Contravariant {indexCount :: {-# UNPACK #-}GHC.Types.Int,
                     indexName :: !GHC.Base.String}
    | Indifferent {indexCount :: {-# UNPACK #-}GHC.Types.Int,
                   indexName :: !GHC.Base.String}
5cb54fb912d9c078df182e26b0a47ea0
  equivI ::
    Tensor.Index.TIndex -> Tensor.Index.TIndex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds1 :: Tensor.Index.TIndex)
                   (ds2 :: Tensor.Index.TIndex) ->
                 case ds1 of wild {
                   Tensor.Index.Covariant dt ds3
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Tensor.Index.Covariant dt1 ds4
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                   Tensor.Index.Contravariant dt ds3
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Tensor.Index.Contravariant dt1 ds4
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) }
                   Tensor.Index.Indifferent dt ds3
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Tensor.Index.Indifferent dt1 ds4
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt dt1) } }) -}
8c1a7fd557f5a4bf923f8ae431425619
  indexCount :: Tensor.Index.TIndex -> GHC.Types.Int
  RecSel Left Tensor.Index.TIndex
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Tensor.Index.TIndex) ->
                 case ds1 of wild {
                   Tensor.Index.Covariant dt ds2 -> GHC.Types.I# dt
                   Tensor.Index.Contravariant dt ds2 -> GHC.Types.I# dt
                   Tensor.Index.Indifferent dt ds2 -> GHC.Types.I# dt }) -}
e29c6ed4fb462258344a89fd7fd1bc42
  indexName :: Tensor.Index.TIndex -> GHC.Base.String
  RecSel Left Tensor.Index.TIndex
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Tensor.Index.TIndex) ->
                 case ds1 of wild {
                   Tensor.Index.Covariant dt ds2 -> ds2
                   Tensor.Index.Contravariant dt ds2 -> ds2
                   Tensor.Index.Indifferent dt ds2 -> ds2 }) -}
instance [safe] Data.Binary.Class.Binary [Tensor.Index.TIndex]
  = Tensor.Index.$fBinaryTIndex
instance [safe] GHC.Classes.Eq [Tensor.Index.TIndex]
  = Tensor.Index.$fEqTIndex
instance [safe] GHC.Show.Show [Tensor.Index.TIndex]
  = Tensor.Index.$fShowTIndex
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

