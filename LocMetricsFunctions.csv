File,Function,LOC,SLOC-P,SLOC-L,MVG,BLOC,C&SLOC,CLOC,CWORD
C:\Users\Artur\Downloads\Multilinear\src\Multilinear.hs,"->(Int,Int)",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear.hs,Data.Set.fromList(indices t2),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear.hs,until (\x -> n == last (indicesNames x))(|>> n),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear.hs,until (\x -> n == last (indicesNames x))(<<| n),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear.hs,::(a -> b),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic.hs,::(* -> *),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic.hs,Monoid(ZipList a),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic.hs,"deriving( Eq, Show, Read, Ord, Monad, MonadPlus, Alternative, Functor, Foldable, Monoid, Generic)",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic.hs,minl( \i -> (v1 Boxed.! i) (v2 Boxed.! i) ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Index.hs,"deriving(Eq, Generic)",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsArray.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsArray.hs,"::( Eq a, Show a, Num a, Bits a ) => String -- ^ Index name (one character) -> Int -- ^ Number of elements -> a -- ^ Value of each element -> VectorTensor a -- ^ Generated linear functional const [d] s v = FiniteTensor (Covariant s [d]) $ ZipVector $ Boxed.replicate (fromIntegral s) (Scalar v) const",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsArray.hs,::( ContGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsArray.hs,::( DiscreteGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsArray.hs,"::( ContGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsArray.hs,"::( DiscreteGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsArray.hs,"::( Eq a, Show a, Num a, Bits a, Serialize a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsList.hs,"::( Eq a, Show a, Num a, Bits a ) => String -- ^ Index name (one character) -> Int -- ^ Number of elements -> a -- ^ Value of each element -> ListTensor a -- ^ Generated linear functional const [d] s v = FiniteTensor (Covariant s [d]) $ ZipList $ replicate (fromIntegral s) (Scalar v) const",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsList.hs,::( ContGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsList.hs,::( DiscreteGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsList.hs,"::( ContGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsList.hs,"::( DiscreteGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Form\AsList.hs,"::( Eq a, Show a, Num a, Bits a, Serialize a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,"deriving(Eq, Generic)",3,3,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( ToJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( ToJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( FromJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsArray.hs,::( FromJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,"deriving(Eq, Generic)",3,3,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( Serialize a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( ToJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( ToJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( FromJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Generic\AsList.hs,::( FromJSON a ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Index\Finite.hs,"deriving(Eq, Generic)",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Index\Infinite.hs,"deriving(Eq, Generic)",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Matrix\AsList.hs,"::( Eq a, Show a, Integral a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Matrix\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Matrix\AsList.hs,::( ContGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Matrix\AsList.hs,::( DiscreteGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Matrix\AsList.hs,"::( ContGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Matrix\AsList.hs,"::( DiscreteGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Matrix\AsList.hs,"::( Eq a, Show a, Num a, Bits a, Serialize a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NForm\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NForm\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NForm\AsList.hs,::( ContGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NForm\AsList.hs,::( DiscreteGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NForm\AsList.hs,"::( ContGen d, Integral i2, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NForm\AsList.hs,"::( DiscreteGen d, Integral i2, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NForm\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NVector\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NVector\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NVector\AsList.hs,::( ContGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NVector\AsList.hs,::( DiscreteGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\NVector\AsList.hs,"::( ContGen d, Integral i2, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Tensor\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Tensor\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Tensor\AsList.hs,::( ContGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Tensor\AsList.hs,::( DiscreteGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Tensor\AsList.hs,"::( ContGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Vector\AsList.hs,"::( Eq a, Show a, Num a, Bits a )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Vector\AsList.hs,"::( Eq a, Show a, Num a, Bits a ) => String -- ^ Index name (one character) -> Int -- ^ Number of elements -> a -- ^ Value of each element -> ListTensor a -- ^ Generated linear functional const [d] s v = FiniteTensor (Contravariant s [d]) $ ZipList $ replicate (fromIntegral s) (Scalar v) const",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Vector\AsList.hs,::( ContGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Vector\AsList.hs,::( DiscreteGen d ),1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Vector\AsList.hs,"::( ContGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Vector\AsList.hs,"::( DiscreteGen d, PrimMonad m )",1,1,1,0,0,0,0,0,
C:\Users\Artur\Downloads\Multilinear\src\Multilinear\Vector\AsList.hs,"::( Eq a, Show a, Num a, Bits a, Serialize a )",1,1,1,0,0,0,0,0,
