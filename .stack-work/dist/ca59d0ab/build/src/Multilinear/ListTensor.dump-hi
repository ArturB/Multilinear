
==================== FINAL INTERFACE ====================
2017-03-08 11:51:14.9938757 UTC

interface Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor [hpc] 8002
  interface hash: 096586f9aa6ae932e7cc5aa6b066777c
  ABI hash: 1aa12da4311c717d52523d414dc255b7
  export-list hash: 21ba8672b49c8e662b8221a66ae7512b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cdec9b8537761099e1856f370e63f4f5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Multilinear.Index.!=!
  Multilinear.Index.equivI
  Multilinear.ListTensor._dot
  Multilinear.ListTensor.commonIndex
  Multilinear.ListTensor.switchInd
  Multilinear.ListTensor.switchInd'
  Multilinear.Index.TIndex{Multilinear.Index.Contravariant Multilinear.Index.Covariant Multilinear.Index.Indifferent indexCount indexName}
  Multilinear.ListTensor.Tensor{Multilinear.ListTensor.Err Multilinear.ListTensor.Scalar Multilinear.ListTensor.Tensor errMessage scalarVal tensorData tensorIndex}
  Multilinear.Operations.Multilinear{Multilinear.Operations.! Multilinear.Operations.*. Multilinear.Operations.+. Multilinear.Operations.-. Multilinear.Operations..* Multilinear.Operations..+ Multilinear.Operations..- Multilinear.Operations../ Multilinear.Operations./. Multilinear.Operations.concat Multilinear.Operations.elems Multilinear.Operations.equiv Multilinear.Operations.indices Multilinear.Operations.inverse Multilinear.Operations.order Multilinear.Operations.rename Multilinear.Operations.transpose}
module dependencies: Multilinear.Index Multilinear.Operations
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0*
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  Multilinear.Index 96f5eab2d014ca17efdb25c1b12aea1e
  exports: 480060e0b08455ffef717b127d57d7f9
  !=! 960830ca27f3e8be496dfcab090468f7
  Contravariant f35df31575f7fffe0ff0a88179e1b103
  Covariant c34f217e53acac5f1d202abf0ffbb9f5
  Indifferent 54fae6659f7d7fe49bc90b0f18ce80a5
  TIndex 10eb11f1d6ab4bdd9fedcea30e3dd762
  equivI e512db28c9c07eb6716d661de08a3083
  indexCount 60f809096bec974d4e6eb335aa265884
  indexName 9a7f0f785eba6dd99af730eea511f699
import  -/  Multilinear.Operations 8ab6bc0011c3314e3da12bcb094dccf6
  exports: f19f996b8cedaeadb661e4f59750a6a6
  ! fbc3c2792ed61413eb86c828f23edd52
  *. b7d9f2789a0550cf140a39a4f64e192c
  +. bbffc736be5211d21c21e7014bced54c
  -. 9f50be5a744e7a7f84f5d219cc089c33
  .* 0791a2834e542d55614f5d69669f0b16
  .+ 8751693a00dc35a7d0f1019f68e9d7d2
  .- 9f847e9d6b21fe56816b809d5241262c
  ./ 298d020d96e15c57de3371e6ffa842bb
  /. e26ed541ae918281011a07420668c7c3
  Multilinear 0c319c1286c1638903abf2ed55a6a178
  concat 92afae8b263c6ce67cab2f59eab6bc42
  elems bb38cee891a568342d038a82c740359c
  equiv a8ef19888eaf0467d5c4f8588a434357
  indices f1a7038a7253ef6cf89e207278105505
  inverse bf02a982fb8e1ca893e3008e7fa5a8bd
  order 5841309ab596da02c27e09b1032c30a8
  rename 7ebedc1ee1b1e92251cc841734468219
  transpose 4d8cd59141c90d8b321006e7843bdd75
import  -/  base-4.9.1.0:Control.Monad f915f187cea611986ebb12dbc69279ab
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Functor 682cc832c233b71cec70179490a08631
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.Maybe ecf0c6f81372d9b58b142d5e758ea51b
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Float b620368aab866c2bb9d3a0a459566b84
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary 471a6fe52b2904efddd28a463c9c8819
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Class 26b921856884ebf3fa980365efaa2264
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Get.Internal 8b5079286a0c6818c089632e1030a3ea
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
2865e39650f0269bce86f81a7bc8be88
  $fBinaryTensor ::
    (Data.Binary.Class.Binary i, Data.Binary.Class.Binary a) =>
    Data.Binary.Class.Binary (Multilinear.ListTensor.Tensor i a)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(U(A,U)),U,A)><L,U(C(U(U,U)),U,A)>m,
     Unfolding: DFun: @ i
                      @ a
                      ($dBinary :: Data.Binary.Class.Binary i)
                      ($dBinary1 :: Data.Binary.Class.Binary a).
                  @ (Multilinear.ListTensor.Tensor i a)
                  (Multilinear.ListTensor.$fBinaryTensor_$cput
                     @ i
                     @ a
                     $dBinary
                     $dBinary1)
                  (Multilinear.ListTensor.$fBinaryTensor_$cget
                     @ i
                     @ a
                     $dBinary
                     $dBinary1)
                  (Multilinear.ListTensor.$fBinaryTensor_$cputList
                     @ i
                     @ a
                     $dBinary
                     $dBinary1) -}
2865e39650f0269bce86f81a7bc8be88
  $fBinaryTensor1 ::
    (Data.Binary.Class.Binary i, Data.Binary.Class.Binary a) =>
    [Multilinear.ListTensor.Tensor i a] -> Data.Binary.Put.Put
  {- Arity: 2,
     Strictness: <L,U(C(U(A,U)),U,A)><L,U(C(U(U,U)),U,A)> -}
2865e39650f0269bce86f81a7bc8be88
  $fBinaryTensor2 ::
    (Data.Binary.Class.Binary i, Data.Binary.Class.Binary a) =>
    forall r.
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success
         (Multilinear.ListTensor.Tensor i a) r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2,
     Strictness: <L,U(C(U(A,U)),U,A)><L,U(C(U(U,U)),U,A)> -}
2865e39650f0269bce86f81a7bc8be88
  $fBinaryTensor_$cget ::
    (Data.Binary.Class.Binary i, Data.Binary.Class.Binary a) =>
    Data.Binary.Get.Internal.Get (Multilinear.ListTensor.Tensor i a)
  {- Arity: 2, Strictness: <L,U(C(U(A,U)),U,A)><L,U(C(U(U,U)),U,A)>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fBinaryTensor2
                  `cast`
                (forall (i :: <*>_N) (a :: <*>_N).
                 <Data.Binary.Class.Binary i>_R
                 ->_R <Data.Binary.Class.Binary a>_R
                 ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                               <Multilinear.ListTensor.Tensor i a>_R)) -}
2865e39650f0269bce86f81a7bc8be88
  $fBinaryTensor_$cput ::
    (Data.Binary.Class.Binary i, Data.Binary.Class.Binary a) =>
    Multilinear.ListTensor.Tensor i a -> Data.Binary.Put.Put
  {- Arity: 3,
     Strictness: <L,U(C(U(A,U)),U,A)><L,U(C(U(U,U)),U,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ i
                   @ a
                   (w :: Data.Binary.Class.Binary i)
                   (w1 :: Data.Binary.Class.Binary a)
                   (w2 :: Multilinear.ListTensor.Tensor i a) ->
                 case Multilinear.ListTensor.$w$cput
                        @ i
                        @ a
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (Data.Binary.Put.PairS @ () ww1 ww2)
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
2865e39650f0269bce86f81a7bc8be88
  $fBinaryTensor_$cputList ::
    (Data.Binary.Class.Binary i, Data.Binary.Class.Binary a) =>
    [Multilinear.ListTensor.Tensor i a] -> Data.Binary.Put.Put
  {- Arity: 2, Strictness: <L,U(C(U(A,U)),U,A)><L,U(C(U(U,U)),U,A)>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fBinaryTensor1 -}
2865e39650f0269bce86f81a7bc8be88
  $fEqTensor ::
    (GHC.Classes.Eq i, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Multilinear.ListTensor.Tensor i a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Unfolding: DFun: @ i
                      @ a
                      ($dEq :: GHC.Classes.Eq i)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Multilinear.ListTensor.Tensor i a)
                  (Multilinear.ListTensor.$fEqTensor_$c== @ i @ a $dEq $dEq1)
                  (Multilinear.ListTensor.$fEqTensor_$c/= @ i @ a $dEq $dEq1) -}
2865e39650f0269bce86f81a7bc8be88
  $fEqTensor1 ::
    (GHC.Classes.Eq i, GHC.Classes.Eq a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fEqTensor2 ::
    (GHC.Classes.Eq i, GHC.Classes.Eq a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)> -}
2865e39650f0269bce86f81a7bc8be88
  $fEqTensor_$c/= ::
    (GHC.Classes.Eq i, GHC.Classes.Eq a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fEqTensor1 -}
2865e39650f0269bce86f81a7bc8be88
  $fEqTensor_$c== ::
    (GHC.Classes.Eq i, GHC.Classes.Eq a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fEqTensor2 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    GHC.Float.Floating (Multilinear.ListTensor.Tensor i a)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(U(U(U,U,U,U,U,U,U),U,U,U),1*U,C(U),C(U),A,A,A,C(U),C(U),A,C(U),C(U),C(U),C(U),C(U),A,C(U),C(U),C(U),A,A,A,A)>,
     Unfolding: DFun: @ i
                      @ a
                      ($dEq :: GHC.Classes.Eq i)
                      ($dShow :: GHC.Show.Show i)
                      ($dIntegral :: GHC.Real.Integral i)
                      ($dFloating :: GHC.Float.Floating a).
                  @ (Multilinear.ListTensor.Tensor i a)
                  (Multilinear.ListTensor.$fFloatingTensor27
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor26
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$cexp
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$clog
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$csqrt
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$c**
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$clogBase
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$csin
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$ccos
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$ctan
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$casin
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$cacos
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$catan
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$csinh
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$ccosh
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$ctanh
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$casinh
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$cacosh
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$catanh
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$clog1p
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$cexpm1
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$clog1pexp
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating)
                  (Multilinear.ListTensor.$fFloatingTensor_$clog1mexp
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFloating) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor1 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(S(S(LLLLLLC(S))LLL)LLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U,U,U),U,U,U),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds @ i @ a w w1 w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor10 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds9 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor11 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(1*U(A,C(U),A,A),A,A,A,A,A,A,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds10 @ i @ a w w1 w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor12 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds11 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor13 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds12 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor14 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds14 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor15 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds15 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor16 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds16 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor17 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(1*U(A,C(U),A,A),A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds17 @ i @ a w w1 w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor18 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds18 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor19 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds19 @ i @ a w3 w4) -}
d733edc996da709bd0ec42f646669c9f
  $fFloatingTensor2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor20 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(1*U(A,C(U),A,A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a)
                   (w5 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds20 @ i @ a w w1 w3 w4 w5) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor21 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,A><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(1*U(1*U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U)),A,A,A),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a)
                   (w5 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds21 @ i @ a w1 w2 w3 w4 w5) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor22 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,A><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><S(SLLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U,U,U),U,U,U),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds23 @ i @ a w1 w2 w3 w4) -}
2269b0ca653eae04424f2bd9618577d1
  $fFloatingTensor23 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Multilinear.ListTensor.$fFloatingTensor3
                   Multilinear.ListTensor.$fFloatingTensor24) -}
3f450ed9e4f0f910cf4725436a8fc92e
  $fFloatingTensor24 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor25 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds5 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor26 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><S(LSLLLLLLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m1,
     Unfolding: InlineRule (4, True, False)
                (\ @ i
                   @ a
                   ($dEq :: GHC.Classes.Eq i)
                   ($dShow :: GHC.Show.Show i)
                   ($dIntegral :: GHC.Real.Integral i)
                   ($dFloating :: GHC.Float.Floating a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.pi} True True} case GHC.Float.pi
                                                                                                                 @ a
                                                                                                                 $dFloating of dt { DEFAULT ->
                                                                                                          Multilinear.ListTensor.Scalar
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            dt }) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor27 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    GHC.Real.Fractional (Multilinear.ListTensor.Tensor i a)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,1*U(1*U(U(U,U,U,U,U,U,U),C(U),A,C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ i
                   @ a
                   ($dEq :: GHC.Classes.Eq i)
                   ($dShow :: GHC.Show.Show i)
                   ($dIntegral :: GHC.Real.Integral i)
                   ($dFloating :: GHC.Float.Floating a) ->
                 Multilinear.ListTensor.$fFractionalTensor
                   @ i
                   @ a
                   $dEq
                   $dShow
                   $dIntegral
                   (GHC.Float.$p1Floating @ a $dFloating)) -}
ea295c34c10d2405c5f412890141a917
  $fFloatingTensor3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor4 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLLLLLLLLLLLLLLLLLLLLL),U(U,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ i
                   @ a
                   ($dEq :: GHC.Classes.Eq i)
                   ($dShow :: GHC.Show.Show i)
                   ($dIntegral :: GHC.Real.Integral i)
                   ($dFloating :: GHC.Float.Floating a)
                   (eta :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$fFloatingTensor6
                   @ i
                   @ a
                   $dEq
                   $dShow
                   $dIntegral
                   $dFloating
                   (Multilinear.ListTensor.$fFloatingTensor5
                      @ i
                      @ a
                      $dEq
                      $dShow
                      $dIntegral
                      $dFloating
                      eta)) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor5 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds1 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor6 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds3 @ i @ a w w1 w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor7 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds6 @ i @ a w w1 w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor8 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds7 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor9 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Float.Floating a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds8 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$c** ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,A><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(1*U(1*U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U)),A,A,A),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor21 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$cacos ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor15 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$cacosh ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor9 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$casin ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor16 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$casinh ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor10 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$catan ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor14 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$catanh ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor8 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$ccos ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor18 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$ccosh ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor12 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$cexp ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor5 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$cexpm1 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor7 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$clog ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor25 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$clog1mexp ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(S(S(LLLLLLC(S))LLL)LLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U,U,U),U,U,U),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor1 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$clog1p ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor6 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$clog1pexp ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLLLLLLLLLLLLLLLLLLLLL),U(U,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor4 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$clogBase ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(1*U(A,C(U),A,A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor20 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$csin ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor19 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$csinh ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor13 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$csqrt ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,A><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><S(SLLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U,U,U),U,U,U),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor22 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$ctan ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(1*U(A,C(U),A,A),A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor17 -}
2865e39650f0269bce86f81a7bc8be88
  $fFloatingTensor_$ctanh ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(1*U(A,C(U),A,A),A,A,A,A,A,A,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFloatingTensor11 -}
2865e39650f0269bce86f81a7bc8be88
  $fFractionalTensor ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Real.Fractional a) =>
    GHC.Real.Fractional (Multilinear.ListTensor.Tensor i a)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(U(U,U,U,U,U,U,U),C(U),A,C(U))>m,
     Unfolding: DFun: @ i
                      @ a
                      ($dEq :: GHC.Classes.Eq i)
                      ($dShow :: GHC.Show.Show i)
                      ($dIntegral :: GHC.Real.Integral i)
                      ($dFractional :: GHC.Real.Fractional a).
                  @ (Multilinear.ListTensor.Tensor i a)
                  (Multilinear.ListTensor.$fFractionalTensor4
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFractional)
                  (Multilinear.ListTensor.$fFractionalTensor_$c/
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFractional)
                  (Multilinear.ListTensor.$fFractionalTensor_$crecip
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFractional)
                  (Multilinear.ListTensor.$fFractionalTensor1
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dFractional) -}
2865e39650f0269bce86f81a7bc8be88
  $fFractionalTensor1 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Real.Fractional a) =>
    GHC.Real.Rational -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><S(LLLC(S)),1*U(A,A,A,1*C1(U))><S(SS),1*U(U,U)>m1,
     Unfolding: InlineRule (5, True, False)
                (\ @ i
                   @ a
                   ($dEq :: GHC.Classes.Eq i)
                   ($dShow :: GHC.Show.Show i)
                   ($dIntegral :: GHC.Real.Integral i)
                   ($dFractional :: GHC.Real.Fractional a)
                   (x :: GHC.Real.Rational) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromRational} True True} case x of x1 { GHC.Real.:% ipv ipv1 ->
                                                                                                                    case GHC.Real.fromRational
                                                                                                                           @ a
                                                                                                                           $dFractional
                                                                                                                           x1 of dt { DEFAULT ->
                                                                                                                    Multilinear.ListTensor.Scalar
                                                                                                                      @ i
                                                                                                                      @ a
                                                                                                                      dt } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fFractionalTensor2 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Real.Fractional a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLL),U(1*U,C(U),A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Real.Fractional a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds24 @ i @ a w w1 w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fFractionalTensor3 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Real.Fractional a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(A,C(U),A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Real.Fractional a)
                   (w4 :: Multilinear.ListTensor.Tensor i a)
                   (w5 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds13 @ i @ a w w1 w3 w4 w5) -}
2865e39650f0269bce86f81a7bc8be88
  $fFractionalTensor4 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Real.Fractional a) =>
    GHC.Num.Num (Multilinear.ListTensor.Tensor i a)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,1*U(1*U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U)),A,A,A)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ i
                   @ a
                   ($dEq :: GHC.Classes.Eq i)
                   ($dShow :: GHC.Show.Show i)
                   ($dIntegral :: GHC.Real.Integral i)
                   ($dFractional :: GHC.Real.Fractional a) ->
                 Multilinear.ListTensor.$fNumTensor
                   @ i
                   @ a
                   $dEq
                   $dShow
                   $dIntegral
                   (GHC.Real.$p1Fractional @ a $dFractional)) -}
2865e39650f0269bce86f81a7bc8be88
  $fFractionalTensor_$c/ ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Real.Fractional a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(A,C(U),A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFractionalTensor3 -}
2865e39650f0269bce86f81a7bc8be88
  $fFractionalTensor_$crecip ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Real.Fractional a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(SLLL),U(1*U,C(U),A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fFractionalTensor2 -}
2865e39650f0269bce86f81a7bc8be88
  $fFunctorTensor ::
    GHC.Base.Functor (Multilinear.ListTensor.Tensor i)
  DFunId
  {- HasNoCafRefs, Strictness: m,
     Unfolding: DFun: @ i.
                  @ (Multilinear.ListTensor.Tensor i)
                  (Multilinear.ListTensor.$fFunctorTensor2 @ i)
                  (Multilinear.ListTensor.$fFunctorTensor1 @ i) -}
2865e39650f0269bce86f81a7bc8be88
  $fFunctorTensor1 ::
    a
    -> Multilinear.ListTensor.Tensor i b
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ i
                   @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Multilinear.ListTensor.Tensor i b) ->
                 Multilinear.ListTensor.$fFunctorTensor2
                   @ i
                   @ b
                   @ a
                   (\ (ds3 :: b) -> eta)
                   eta1) -}
2865e39650f0269bce86f81a7bc8be88
  $fFunctorTensor2 ::
    (a -> b)
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
9859ea743188c6fde8bb5ea905cfcf02
  $fFunctorTensor_$sds ::
    Multilinear.Index.TIndex i
    -> [Multilinear.ListTensor.Tensor i a]
    -> (a -> a)
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor ::
    Multilinear.Operations.Multilinear Multilinear.ListTensor.Tensor
  DFunId
  {- Unfolding: DFun:.
                  @ Multilinear.ListTensor.Tensor
                  Multilinear.ListTensor.$fMultilinearTensor_$c!
                  Multilinear.ListTensor.$fMultilinearTensor_$c.+
                  Multilinear.ListTensor.$fMultilinearTensor_$c.-
                  Multilinear.ListTensor.$fMultilinearTensor_$c.*
                  Multilinear.ListTensor.$fMultilinearTensor_$c./
                  Multilinear.ListTensor.$fMultilinearTensor_$c+.
                  Multilinear.ListTensor.$fMultilinearTensor_$c-.
                  Multilinear.ListTensor.$fMultilinearTensor_$c*.
                  Multilinear.ListTensor.$fMultilinearTensor_$c/.
                  Multilinear.ListTensor.$fMultilinearTensor6
                  Multilinear.ListTensor.$fMultilinearTensor3
                  Multilinear.ListTensor.$fMultilinearTensor5
                  Multilinear.ListTensor.$fMultilinearTensor4
                  Multilinear.ListTensor.$fMultilinearTensor_$cinverse
                  Multilinear.ListTensor.$fMultilinearTensor_$cconcat
                  Multilinear.ListTensor.$fMultilinearTensor2
                  Multilinear.ListTensor.$fMultilinearTensor1 -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor1 ::
    GHC.Num.Num i => Multilinear.ListTensor.Tensor i a -> i
  {- Arity: 2,
     Strictness: <S,U(A,A,C(C1(U)),C(U),A,A,C(U))><S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor2 ::
    GHC.Classes.Eq i =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ i
                   @ a
                   ($dEq :: GHC.Classes.Eq i)
                   (t1 :: Multilinear.ListTensor.Tensor i a)
                   (t2 :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.equiv} True True} case t2 of t4 { DEFAULT ->
                                                                                                             let {
                                                                                                               eta :: [GHC.Types.Bool]
                                                                                                               = GHC.List.zipWith
                                                                                                                   @ (Multilinear.Index.TIndex
                                                                                                                        i)
                                                                                                                   @ (Multilinear.Index.TIndex
                                                                                                                        i)
                                                                                                                   @ GHC.Types.Bool
                                                                                                                   ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.Index.!=!} True True} Multilinear.Index.equivI
                                                                                                                                                                                                           @ i
                                                                                                                                                                                                           $dEq)
                                                                                                                   (Multilinear.ListTensor.$fMultilinearTensor3
                                                                                                                      @ i
                                                                                                                      @ a
                                                                                                                      t1)
                                                                                                                   (Multilinear.ListTensor.$fMultilinearTensor3
                                                                                                                      @ i
                                                                                                                      @ a
                                                                                                                      t4)
                                                                                                             } in
                                                                                                             ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.equiv} False True} Multilinear.ListTensor.$fMultilinearTensor_go
                                                                                                                                                                                                             eta)
                                                                                                               `cast`
                                                                                                             (Data.Monoid.N:All[0]) }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor3 ::
    Multilinear.ListTensor.Tensor i a -> [Multilinear.Index.TIndex i]
  {- Arity: 1, Strictness: <S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor4 ::
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor5 ::
    Multilinear.ListTensor.Tensor i a
    -> GHC.Base.String
    -> GHC.Base.String
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor6 ::
    Multilinear.ListTensor.Tensor i a -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ i @ a (w :: Multilinear.ListTensor.Tensor i a) ->
                 case Multilinear.ListTensor.$wds28
                        @ i
                        @ a
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor7 :: Multilinear.ListTensor.Tensor i a
  {- Unfolding: (\ @ a @ i ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.!} False True} Multilinear.ListTensor.$WErr
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            Multilinear.ListTensor.$fMultilinearTensor8) -}
35f0cdc292fa510381dfffc350960315
  $fMultilinearTensor8 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.!} False True} GHC.CString.unpackCString#
                                                                                                            "Scalar has no indices!"#) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c! ::
    GHC.Real.Integral i =>
    Multilinear.ListTensor.Tensor i a
    -> i -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,1*C1(U))><S,1*U><S,1*U>,
     Unfolding: (\ @ i
                   @ a
                   ($dIntegral :: GHC.Real.Integral i)
                   (ds3 :: Multilinear.ListTensor.Tensor i a)
                   (ds4 :: i) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.!} True True} case ds3 of wild {
                                                                                                           Multilinear.ListTensor.Scalar ds5
                                                                                                           -> case ds4 of ds6 { DEFAULT ->
                                                                                                              Multilinear.ListTensor.$fMultilinearTensor7
                                                                                                                @ a
                                                                                                                @ i }
                                                                                                           Multilinear.ListTensor.Tensor ds5 ts
                                                                                                           -> case ds4 of ds6 { DEFAULT ->
                                                                                                              case GHC.Integer.Type.integerToInt
                                                                                                                     (GHC.Real.toInteger
                                                                                                                        @ i
                                                                                                                        $dIntegral
                                                                                                                        ds6) of wild1 { DEFAULT ->
                                                                                                              GHC.List.$w!!
                                                                                                                @ (Multilinear.ListTensor.Tensor
                                                                                                                     i
                                                                                                                     a)
                                                                                                                ts
                                                                                                                wild1 } }
                                                                                                           Multilinear.ListTensor.Err msg
                                                                                                           -> case ds4 of ds5 { DEFAULT ->
                                                                                                              wild } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c*. ::
    GHC.Num.Num a =>
    Multilinear.ListTensor.Tensor i a
    -> a -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.ListTensor.Tensor i a)
                   (x :: a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.*.} True True} case t of t1 { DEFAULT ->
                                                                                                          case x of x1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (\ (ds3 :: a) ->
                                                                                                             GHC.Num.*
                                                                                                               @ a
                                                                                                               $dNum
                                                                                                               ds3
                                                                                                               x1)
                                                                                                            t1 } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c+. ::
    GHC.Num.Num a =>
    Multilinear.ListTensor.Tensor i a
    -> a -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.ListTensor.Tensor i a)
                   (x :: a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.+.} True True} case t of t1 { DEFAULT ->
                                                                                                          case x of x1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (\ (ds3 :: a) ->
                                                                                                             GHC.Num.+
                                                                                                               @ a
                                                                                                               $dNum
                                                                                                               ds3
                                                                                                               x1)
                                                                                                            t1 } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c-. ::
    GHC.Num.Num a =>
    Multilinear.ListTensor.Tensor i a
    -> a -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ i
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.ListTensor.Tensor i a)
                   (x :: a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.-.} True True} case x of x1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (\ (p :: a) ->
                                                                                                             case p of p1 { DEFAULT ->
                                                                                                             {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.-..\} True True} GHC.Num.-
                                                                                                                                                                                                          @ a
                                                                                                                                                                                                          $dNum
                                                                                                                                                                                                          p1
                                                                                                                                                                                                          x1 })
                                                                                                            t }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c.* ::
    GHC.Num.Num a =>
    a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(S)LLLL),1*U(A,A,1*C1(U),A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dNum :: GHC.Num.Num a)
                   (x :: a)
                   (t :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor..*} True True} case x of x1 { DEFAULT ->
                                                                                                          case t of t1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (GHC.Num.*
                                                                                                               @ a
                                                                                                               $dNum
                                                                                                               x1)
                                                                                                            t1 } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c.+ ::
    GHC.Num.Num a =>
    a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(S)LLLLLL),1*U(1*C1(U),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dNum :: GHC.Num.Num a)
                   (x :: a)
                   (t :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor..+} True True} case x of x1 { DEFAULT ->
                                                                                                          case t of t1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (GHC.Num.+
                                                                                                               @ a
                                                                                                               $dNum
                                                                                                               x1)
                                                                                                            t1 } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c.- ::
    GHC.Num.Num a =>
    a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)LLLLL),1*U(A,1*C1(U),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dNum :: GHC.Num.Num a)
                   (x :: a)
                   (t :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor..-} True True} case x of x1 { DEFAULT ->
                                                                                                          case t of t1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (GHC.Num.-
                                                                                                               @ a
                                                                                                               $dNum
                                                                                                               x1)
                                                                                                            t1 } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c./ ::
    GHC.Real.Fractional a =>
    a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)LL),1*U(A,1*C1(U),A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dFractional :: GHC.Real.Fractional a)
                   (x :: a)
                   (t :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor../} True True} case x of x1 { DEFAULT ->
                                                                                                          case t of t1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (GHC.Real./
                                                                                                               @ a
                                                                                                               $dFractional
                                                                                                               x1)
                                                                                                            t1 } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$c/. ::
    GHC.Real.Fractional a =>
    Multilinear.ListTensor.Tensor i a
    -> a -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ i
                   ($dFractional :: GHC.Real.Fractional a)
                   (t :: Multilinear.ListTensor.Tensor i a)
                   (x :: a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor./.} True True} case t of t1 { DEFAULT ->
                                                                                                          case x of x1 { DEFAULT ->
                                                                                                          Multilinear.ListTensor.$fFunctorTensor2
                                                                                                            @ i
                                                                                                            @ a
                                                                                                            @ a
                                                                                                            (\ (ds3 :: a) ->
                                                                                                             GHC.Real./
                                                                                                               @ a
                                                                                                               $dFractional
                                                                                                               ds3
                                                                                                               x1)
                                                                                                            t1 } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$cconcat ::
    GHC.Types.Char
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*H><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ i
                   @ a
                   (ds3 :: GHC.Types.Char)
                   (ds4 :: Multilinear.ListTensor.Tensor i a)
                   (t :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.concat} True True} case ds3 of ds5 { GHC.Types.C# ipv ->
                                                                                                              case ds4 of ds6 { DEFAULT ->
                                                                                                              t } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fMultilinearTensor_$cinverse ::
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ i @ a (t :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.inverse} True False} t) -}
3b04216a5747d7bbe6967342e2724d47
  $fMultilinearTensor_$sds ::
    Multilinear.Index.TIndex i
    -> [Multilinear.ListTensor.Tensor i a]
    -> [Multilinear.Index.TIndex i]
  {- Arity: 2, Strictness: <L,U><L,U> -}
1a78afb3b87aa76fc7cdcf355ba9b75e
  $fMultilinearTensor_go :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    GHC.Num.Num (Multilinear.ListTensor.Tensor i a)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U))>m,
     Unfolding: DFun: @ i
                      @ a
                      ($dEq :: GHC.Classes.Eq i)
                      ($dShow :: GHC.Show.Show i)
                      ($dIntegral :: GHC.Real.Integral i)
                      ($dNum :: GHC.Num.Num a).
                  @ (Multilinear.ListTensor.Tensor i a)
                  (Multilinear.ListTensor.$fNumTensor_$c+
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dNum)
                  (Multilinear.ListTensor.$fNumTensor_$c-
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dNum)
                  (Multilinear.ListTensor.$fNumTensor5
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dNum)
                  (Multilinear.ListTensor.$fNumTensor_$cnegate
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dNum)
                  (Multilinear.ListTensor.$fNumTensor_$cabs
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dNum)
                  (Multilinear.ListTensor.$fNumTensor_$csignum
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dNum)
                  (Multilinear.ListTensor.$fNumTensor1
                     @ i
                     @ a
                     $dEq
                     $dShow
                     $dIntegral
                     $dNum) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor1 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    GHC.Integer.Type.Integer -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S,1*U>m1,
     Unfolding: InlineRule (5, True, False)
                (\ @ i
                   @ a
                   ($dEq :: GHC.Classes.Eq i)
                   ($dShow :: GHC.Show.Show i)
                   ($dIntegral :: GHC.Real.Integral i)
                   ($dNum :: GHC.Num.Num a)
                   (x :: GHC.Integer.Type.Integer) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromInteger} True True} case x of x1 { DEFAULT ->
                                                                                                                   case GHC.Num.fromInteger
                                                                                                                          @ a
                                                                                                                          $dNum
                                                                                                                          x1 of dt { DEFAULT ->
                                                                                                                   Multilinear.ListTensor.Scalar
                                                                                                                     @ i
                                                                                                                     @ a
                                                                                                                     dt } }) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor2 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,C(U),A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Num.Num a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds25 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor3 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,C(U),A,A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Num.Num a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds26 @ i @ a w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor4 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(LLLLLLC(S)),U(A,C(C1(U)),A,A,A,A,1*C1(U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Num.Num a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds27 @ i @ a w w1 w3 w4) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor5 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,A><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U))><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Num.Num a)
                   (w4 :: Multilinear.ListTensor.Tensor i a)
                   (w5 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds22 @ i @ a w1 w2 w3 w4 w5) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor6 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(A,C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Num.Num a)
                   (w4 :: Multilinear.ListTensor.Tensor i a)
                   (w5 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds2 @ i @ a w w1 w3 w4 w5) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor7 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(C(U),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Num.Num a)
                   (w4 :: Multilinear.ListTensor.Tensor i a)
                   (w5 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds4 @ i @ a w w1 w3 w4 w5) -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor_$c+ ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(C(U),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fNumTensor7 -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor_$c- ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><L,U(A,C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fNumTensor6 -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor_$cabs ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,C(U),A,A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fNumTensor3 -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor_$cnegate ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,A><S(LLLLLLC(S)),U(A,C(C1(U)),A,A,A,A,1*C1(U))><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fNumTensor4 -}
2865e39650f0269bce86f81a7bc8be88
  $fNumTensor_$csignum ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><L,U(A,A,A,A,A,C(U),A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fNumTensor2 -}
2865e39650f0269bce86f81a7bc8be88
  $fShowTensor ::
    (GHC.Show.Show i, GHC.Show.Show a) =>
    GHC.Show.Show (Multilinear.ListTensor.Tensor i a)
  DFunId
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)>m,
     Unfolding: DFun: @ i
                      @ a
                      ($dShow :: GHC.Show.Show i)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Multilinear.ListTensor.Tensor i a)
                  (Multilinear.ListTensor.$fShowTensor_$cshowsPrec
                     @ i
                     @ a
                     $dShow
                     $dShow1)
                  (Multilinear.ListTensor.$fShowTensor_$cshow @ i @ a $dShow $dShow1)
                  (Multilinear.ListTensor.$fShowTensor_$cshowList
                     @ i
                     @ a
                     $dShow
                     $dShow1) -}
2865e39650f0269bce86f81a7bc8be88
  $fShowTensor1 ::
    (GHC.Show.Show i, GHC.Show.Show a) =>
    [Multilinear.ListTensor.Tensor i a] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><S,1*U><L,U>,
     Unfolding: (\ @ i
                   @ a
                   ($dShow :: GHC.Show.Show i)
                   ($dShow1 :: GHC.Show.Show a)
                   (ls :: [Multilinear.ListTensor.Tensor i a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Multilinear.ListTensor.Tensor i a)
                   (\ (x :: Multilinear.ListTensor.Tensor i a)
                      (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Multilinear.ListTensor.$fShowTensor2 @ i @ a $dShow $dShow1 x)
                      s1)
                   ls
                   s) -}
2865e39650f0269bce86f81a7bc8be88
  $fShowTensor2 ::
    (GHC.Show.Show i, GHC.Show.Show a) =>
    Multilinear.ListTensor.Tensor i a -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><S,1*U> -}
2865e39650f0269bce86f81a7bc8be88
  $fShowTensor3 ::
    (GHC.Show.Show i, GHC.Show.Show a) =>
    GHC.Types.Int
    -> Multilinear.ListTensor.Tensor i a -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ i
                   @ a
                   ($dShow :: GHC.Show.Show i)
                   ($dShow1 :: GHC.Show.Show a)
                   (ds3 :: GHC.Types.Int)
                   (x :: Multilinear.ListTensor.Tensor i a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Multilinear.ListTensor.$fShowTensor2 @ i @ a $dShow $dShow1 x))
                   s) -}
2865e39650f0269bce86f81a7bc8be88
  $fShowTensor_$cshow ::
    (GHC.Show.Show i, GHC.Show.Show a) =>
    Multilinear.ListTensor.Tensor i a -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fShowTensor2 -}
2865e39650f0269bce86f81a7bc8be88
  $fShowTensor_$cshowList ::
    (GHC.Show.Show i, GHC.Show.Show a) =>
    [Multilinear.ListTensor.Tensor i a] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fShowTensor1 -}
2865e39650f0269bce86f81a7bc8be88
  $fShowTensor_$cshowsPrec ::
    (GHC.Show.Show i, GHC.Show.Show a) =>
    GHC.Types.Int
    -> Multilinear.ListTensor.Tensor i a -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Multilinear.ListTensor.$fShowTensor3 -}
74fe8ee26afef144757b044579ed8fbd
  $tc'Err :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16994910641946218038##
                   14344779062477602406##
                   Multilinear.ListTensor.$trModule
                   Multilinear.ListTensor.$tc'Err1) -}
4ef3c173af4fc06103d4c795d61c4c5b
  $tc'Err1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Err"#) -}
99d6abaccc0fa7eda4faf057fd148cce
  $tc'Scalar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5305295587918108194##
                   5036428475159186812##
                   Multilinear.ListTensor.$trModule
                   Multilinear.ListTensor.$tc'Scalar1) -}
d42d2557c60285592e08ce3bfdbda9f7
  $tc'Scalar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scalar"#) -}
b6b563040b3c5dcd404a77cbf34a82cc
  $tc'Tensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6137999924895775066##
                   3052690546666526659##
                   Multilinear.ListTensor.$trModule
                   Multilinear.ListTensor.$tc'Tensor1) -}
9c7fb622e43f758df0ea36743ebd917b
  $tc'Tensor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tensor"#) -}
5652100a04fa5a9eb7100954b407c5a3
  $tcTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   690525464416973785##
                   15702683811237418645##
                   Multilinear.ListTensor.$trModule
                   Multilinear.ListTensor.$tcTensor1) -}
4e3d969eb3386c14e7c264e9c6963750
  $tcTensor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tensor"#) -}
47ede366c763f7066c0888875cc7d8f4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Multilinear.ListTensor.$trModule2
                   Multilinear.ListTensor.$trModule1) -}
2db0a0b17c40d7180cd0cf7e976a862c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Multilinear.ListTensor"#) -}
c4b840e014d89554f640fdd528fc605a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU"#) -}
2865e39650f0269bce86f81a7bc8be88
  $w$cput ::
    (Data.Binary.Class.Binary i, Data.Binary.Class.Binary a) =>
    Multilinear.ListTensor.Tensor i a
    -> (# (), Data.ByteString.Builder.Internal.Builder #)
  {- Arity: 3,
     Strictness: <L,U(C(U(A,U)),U,A)><L,U(C(U(U,U)),U,A)><S,1*U>,
     Inline: [0] -}
79d16a05f1008f6a931f49f857c278fb
  $w_dot ::
    (GHC.Show.Show i, GHC.Real.Integral i, GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3,
     Strictness: <L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U))>,
     Inline: [0] -}
dbe467c1d310c2ba51728a9cdfe33d73
  $wcommonIndex ::
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   @ i
                   (w :: Multilinear.ListTensor.Tensor i a)
                   (w1 :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.commonIndex} True True} case w of wild {
                                                                                                                     DEFAULT
                                                                                                                     -> case w1 of t2 { DEFAULT ->
                                                                                                                        GHC.Base.Nothing
                                                                                                                          @ GHC.Base.String }
                                                                                                                     Multilinear.ListTensor.Tensor ds3 ds4
                                                                                                                     -> case w1 of wild1 {
                                                                                                                          DEFAULT
                                                                                                                          -> GHC.Base.Nothing
                                                                                                                               @ GHC.Base.String
                                                                                                                          Multilinear.ListTensor.Tensor ds5 ds6
                                                                                                                          -> case {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.commonIndex.indicesNames2} True True} GHC.Base.map
                                                                                                                                                                                                                                                    @ (Multilinear.Index.TIndex
                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                    @ [GHC.Types.Char]
                                                                                                                                                                                                                                                    (Multilinear.Index.indexName
                                                                                                                                                                                                                                                       @ i)
                                                                                                                                                                                                                                                    (Multilinear.ListTensor.$fMultilinearTensor_$sds
                                                                                                                                                                                                                                                       @ a
                                                                                                                                                                                                                                                       @ i
                                                                                                                                                                                                                                                       ds5
                                                                                                                                                                                                                                                       ds6) of indicesNames2 { DEFAULT ->
                                                                                                                             case {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.commonIndex.indicesNames1} True True} GHC.Base.map
                                                                                                                                                                                                                                                    @ (Multilinear.Index.TIndex
                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                    @ [GHC.Types.Char]
                                                                                                                                                                                                                                                    (Multilinear.Index.indexName
                                                                                                                                                                                                                                                       @ i)
                                                                                                                                                                                                                                                    (Multilinear.ListTensor.$fMultilinearTensor_$sds
                                                                                                                                                                                                                                                       @ a
                                                                                                                                                                                                                                                       @ i
                                                                                                                                                                                                                                                       ds3
                                                                                                                                                                                                                                                       ds4) of indicesNames1 { DEFAULT ->
                                                                                                                             let {
                                                                                                                               eta :: [GHC.Base.Maybe
                                                                                                                                         GHC.Base.String]
                                                                                                                               = GHC.Base.map
                                                                                                                                   @ [GHC.Types.Char]
                                                                                                                                   @ (GHC.Base.Maybe
                                                                                                                                        GHC.Base.String)
                                                                                                                                   (\ (i1 :: GHC.Base.String) ->
                                                                                                                                    case i1 of i2 { DEFAULT ->
                                                                                                                                    {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.commonIndex.\} True True} letrec {
                                                                                                                                                                                                                                          go1 :: [GHC.Base.String]
                                                                                                                                                                                                                                                 -> Data.Monoid.First
                                                                                                                                                                                                                                                      GHC.Base.String
                                                                                                                                                                                                                                            {- Arity: 1,
                                                                                                                                                                                                                                               Strictness: <S,1*U> -}
                                                                                                                                                                                                                                          = \ (ds7 :: [GHC.Base.String]) ->
                                                                                                                                                                                                                                            case ds7 of wild2 {
                                                                                                                                                                                                                                              []
                                                                                                                                                                                                                                              -> (GHC.Base.Nothing
                                                                                                                                                                                                                                                    @ GHC.Base.String)
                                                                                                                                                                                                                                                   `cast`
                                                                                                                                                                                                                                                 (Sym (Data.Monoid.N:First[0]) <GHC.Base.String>_N)
                                                                                                                                                                                                                                              : y ys
                                                                                                                                                                                                                                              -> case GHC.Base.eqString
                                                                                                                                                                                                                                                        y
                                                                                                                                                                                                                                                        i2 of wild3 {
                                                                                                                                                                                                                                                   GHC.Types.False
                                                                                                                                                                                                                                                   -> go1
                                                                                                                                                                                                                                                        ys
                                                                                                                                                                                                                                                   GHC.Types.True
                                                                                                                                                                                                                                                   -> (GHC.Base.Just
                                                                                                                                                                                                                                                         @ GHC.Base.String
                                                                                                                                                                                                                                                         y)
                                                                                                                                                                                                                                                        `cast`
                                                                                                                                                                                                                                                      (Sym (Data.Monoid.N:First[0]) <GHC.Base.String>_N) } }
                                                                                                                                                                                                                                        } in
                                                                                                                                                                                                                                        (go1
                                                                                                                                                                                                                                           indicesNames2)
                                                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                                                        (Data.Monoid.N:First[0] <GHC.Base.String>_N) })
                                                                                                                                   indicesNames1
                                                                                                                             } in
                                                                                                                             {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.commonIndex} False True} Multilinear.ListTensor.commonIndex_go
                                                                                                                                                                                                                                  eta } } } }) -}
2865e39650f0269bce86f81a7bc8be88
  $wds ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><S(S(S(LLLLLLC(S))LLL)LLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U,U,U),U,U,U),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 let {
                   w4 :: GHC.Real.Fractional a = GHC.Float.$p1Floating @ a w2
                 } in
                 let {
                   w5 :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w4
                 } in
                 Multilinear.ListTensor.$wds3
                   @ i
                   @ a
                   w
                   w1
                   w2
                   (Multilinear.ListTensor.$wds2
                      @ i
                      @ a
                      w
                      w1
                      w5
                      ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromInteger} True True} case GHC.Num.fromInteger
                                                                                                                                @ a
                                                                                                                                w5
                                                                                                                                Multilinear.ListTensor.$fFloatingTensor2 of dt { DEFAULT ->
                                                                                                                         Multilinear.ListTensor.Scalar
                                                                                                                           @ i
                                                                                                                           @ a
                                                                                                                           dt })
                      (Multilinear.ListTensor.$wds1 @ i @ a w2 w3))) -}
2865e39650f0269bce86f81a7bc8be88
  $wds1 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds10 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(1*U(A,C(U),A,A),A,A,A,A,A,A,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds13
                   @ i
                   @ a
                   w
                   w1
                   (GHC.Float.$p1Floating @ a w2)
                   (Multilinear.ListTensor.$wds12 @ i @ a w2 w3)
                   (Multilinear.ListTensor.$wds11 @ i @ a w2 w3)) -}
2865e39650f0269bce86f81a7bc8be88
  $wds11 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds12 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds13 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Fractional a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(A,C(U),A,A)><S,1*U><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds14 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds15 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds16 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds17 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(1*U(A,C(U),A,A),A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds13
                   @ i
                   @ a
                   w
                   w1
                   (GHC.Float.$p1Floating @ a w2)
                   (Multilinear.ListTensor.$wds19 @ i @ a w2 w3)
                   (Multilinear.ListTensor.$wds18 @ i @ a w2 w3)) -}
2865e39650f0269bce86f81a7bc8be88
  $wds18 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds19 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds2 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(A,C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds20 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(1*U(A,C(U),A,A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds13
                   @ i
                   @ a
                   w
                   w1
                   (GHC.Float.$p1Floating @ a w2)
                   (Multilinear.ListTensor.$wds5 @ i @ a w2 w4)
                   (Multilinear.ListTensor.$wds5 @ i @ a w2 w3)) -}
2865e39650f0269bce86f81a7bc8be88
  $wds21 ::
    (GHC.Show.Show i, GHC.Real.Integral i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(1*U(1*U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U)),A,A,A),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Show.Show i)
                   (w1 :: GHC.Real.Integral i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a)
                   (w4 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds1
                   @ i
                   @ a
                   w2
                   (Multilinear.ListTensor.$wds22
                      @ i
                      @ a
                      w
                      w1
                      (GHC.Real.$p1Fractional @ a (GHC.Float.$p1Floating @ a w2))
                      (Multilinear.ListTensor.$wds5 @ i @ a w2 w3)
                      w4)) -}
2865e39650f0269bce86f81a7bc8be88
  $wds22 ::
    (GHC.Show.Show i, GHC.Real.Integral i, GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U))><S,1*U><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds23 ::
    (GHC.Show.Show i, GHC.Real.Integral i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><S(SLLLLLLLLLLLLLLLLLLLLLL),U(U(U(U,U,U,U,U,U,U),U,U,U),A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Show.Show i)
                   (w1 :: GHC.Real.Integral i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a w2
                 } in
                 Multilinear.ListTensor.$wds21
                   @ i
                   @ a
                   w
                   w1
                   w2
                   w3
                   ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromRational} True True} case GHC.Real.fromRational
                                                                                                                              @ a
                                                                                                                              $dFractional
                                                                                                                              Multilinear.ListTensor.$fFloatingTensor23 of dt { DEFAULT ->
                                                                                                                       Multilinear.ListTensor.Scalar
                                                                                                                         @ i
                                                                                                                         @ a
                                                                                                                         dt })) -}
2865e39650f0269bce86f81a7bc8be88
  $wds24 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Fractional a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><S(SLLL),U(1*U,C(U),A,A)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Fractional a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w2
                 } in
                 Multilinear.ListTensor.$wds13
                   @ i
                   @ a
                   w
                   w1
                   w2
                   ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromInteger} True True} case GHC.Num.fromInteger
                                                                                                                             @ a
                                                                                                                             $dNum
                                                                                                                             Multilinear.ListTensor.$fFloatingTensor3 of dt { DEFAULT ->
                                                                                                                      Multilinear.ListTensor.Scalar
                                                                                                                        @ i
                                                                                                                        @ a
                                                                                                                        dt })
                   w3) -}
2865e39650f0269bce86f81a7bc8be88
  $wds25 ::
    GHC.Num.Num a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,C(U),A)><S,1*U>, Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds26 ::
    GHC.Num.Num a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,C(U),A,A)><S,1*U>, Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds27 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><S(LLLLLLC(S)),U(A,C(C1(U)),A,A,A,A,1*C1(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Num.Num a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wds2
                   @ i
                   @ a
                   w
                   w1
                   w2
                   ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromInteger} True True} case GHC.Num.fromInteger
                                                                                                                             @ a
                                                                                                                             w2
                                                                                                                             Multilinear.ListTensor.$fFloatingTensor2 of dt { DEFAULT ->
                                                                                                                      Multilinear.ListTensor.Scalar
                                                                                                                        @ i
                                                                                                                        @ a
                                                                                                                        dt })
                   w3) -}
2865e39650f0269bce86f81a7bc8be88
  $wds28 ::
    Multilinear.ListTensor.Tensor i a
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds3 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a w2
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 Multilinear.ListTensor.$wds5
                   @ i
                   @ a
                   w2
                   (Multilinear.ListTensor.$wds4
                      @ i
                      @ a
                      w
                      w1
                      $dNum
                      ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromInteger} True True} case GHC.Num.fromInteger
                                                                                                                                @ a
                                                                                                                                $dNum
                                                                                                                                Multilinear.ListTensor.$fFloatingTensor3 of dt { DEFAULT ->
                                                                                                                         Multilinear.ListTensor.Scalar
                                                                                                                           @ i
                                                                                                                           @ a
                                                                                                                           dt })
                      w3)) -}
2865e39650f0269bce86f81a7bc8be88
  $wds4 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><L,U(C(U),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds5 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds6 ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Float.Floating a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(A,C(U),A)><S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Float.Floating a)
                   (w3 :: Multilinear.ListTensor.Tensor i a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a w2
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 Multilinear.ListTensor.$wds2
                   @ i
                   @ a
                   w
                   w1
                   $dNum
                   (Multilinear.ListTensor.$wds1 @ i @ a w2 w3)
                   ({__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.fromInteger} True True} case GHC.Num.fromInteger
                                                                                                                             @ a
                                                                                                                             $dNum
                                                                                                                             Multilinear.ListTensor.$fFloatingTensor3 of dt { DEFAULT ->
                                                                                                                      Multilinear.ListTensor.Scalar
                                                                                                                        @ i
                                                                                                                        @ a
                                                                                                                        dt })) -}
2865e39650f0269bce86f81a7bc8be88
  $wds7 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds8 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
2865e39650f0269bce86f81a7bc8be88
  $wds9 ::
    GHC.Float.Floating a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
029862731b392ae3ce14c83579264871
  $wswitchInd ::
    GHC.Real.Integral i =>
    Multilinear.ListTensor.Tensor i a
    -> GHC.Base.Maybe GHC.Base.String
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3,
     Strictness: <L,U(1*U,1*U,A,A,A,A,A,A,C(U))><S,1*U><S,1*U>,
     Inline: [0] -}
242285ddfff49bd0ca430a2f0ef557d2
  $wswitchInd' ::
    GHC.Real.Integral i =>
    Multilinear.ListTensor.Tensor i a
    -> GHC.Base.Maybe GHC.Base.String
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 3, Strictness: <L,U(U,U,A,A,A,A,A,A,C(U))><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ i
                   @ a
                   (w :: GHC.Real.Integral i)
                   (w1 :: Multilinear.ListTensor.Tensor i a)
                   (w2 :: GHC.Base.Maybe GHC.Base.String) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.switchInd'} True True} case w1 of wild {
                                                                                                                    DEFAULT
                                                                                                                    -> case w2 of wild1 {
                                                                                                                         GHC.Base.Nothing
                                                                                                                         -> wild
                                                                                                                         GHC.Base.Just ipv
                                                                                                                         -> case wild of wild2 {
                                                                                                                              Multilinear.ListTensor.Tensor ds3 ds4
                                                                                                                              -> case GHC.List.$wlenAcc
                                                                                                                                        @ (Multilinear.Index.TIndex
                                                                                                                                             i)
                                                                                                                                        (Multilinear.ListTensor.$fMultilinearTensor_$sds
                                                                                                                                           @ a
                                                                                                                                           @ i
                                                                                                                                           ds3
                                                                                                                                           ds4)
                                                                                                                                        0# of ww2 { DEFAULT ->
                                                                                                                                 case GHC.Prim.tagToEnum#
                                                                                                                                        @ GHC.Types.Bool
                                                                                                                                        (GHC.Prim.>#
                                                                                                                                           ww2
                                                                                                                                           1#) of wild3 {
                                                                                                                                   GHC.Types.False
                                                                                                                                   -> wild2
                                                                                                                                   GHC.Types.True
                                                                                                                                   -> case {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.switchInd'.t2} True True} Multilinear.ListTensor.$wswitchInd
                                                                                                                                                                                                                                                 @ i
                                                                                                                                                                                                                                                 @ a
                                                                                                                                                                                                                                                 w
                                                                                                                                                                                                                                                 wild2
                                                                                                                                                                                                                                                 wild1 of t2 { DEFAULT ->
                                                                                                                                      {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.tensorIndex} True False} case t2 of wild4 {
                                                                                                                                                                                                                                           DEFAULT
                                                                                                                                                                                                                                           -> case Multilinear.ListTensor.switchInd'1
                                                                                                                                                                                                                                              ret_ty (Multilinear.ListTensor.Tensor
                                                                                                                                                                                                                                                        i
                                                                                                                                                                                                                                                        a)
                                                                                                                                                                                                                                              of {}
                                                                                                                                                                                                                                           Multilinear.ListTensor.Tensor ds5 ds6
                                                                                                                                                                                                                                           -> {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.tensorData} True False} case GHC.Base.map
                                                                                                                                                                                                                                                                                                                                                       @ (Multilinear.ListTensor.Tensor
                                                                                                                                                                                                                                                                                                                                                            i
                                                                                                                                                                                                                                                                                                                                                            a)
                                                                                                                                                                                                                                                                                                                                                       @ (Multilinear.ListTensor.Tensor
                                                                                                                                                                                                                                                                                                                                                            i
                                                                                                                                                                                                                                                                                                                                                            a)
                                                                                                                                                                                                                                                                                                                                                       (\ (ds7 :: Multilinear.ListTensor.Tensor
                                                                                                                                                                                                                                                                                                                                                                    i
                                                                                                                                                                                                                                                                                                                                                                    a) ->
                                                                                                                                                                                                                                                                                                                                                        Multilinear.ListTensor.switchInd'_$s$wswitchInd'
                                                                                                                                                                                                                                                                                                                                                          @ a
                                                                                                                                                                                                                                                                                                                                                          @ i
                                                                                                                                                                                                                                                                                                                                                          ipv
                                                                                                                                                                                                                                                                                                                                                          ds7
                                                                                                                                                                                                                                                                                                                                                          w)
                                                                                                                                                                                                                                                                                                                                                       ds6 of dt { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                                Multilinear.ListTensor.Tensor
                                                                                                                                                                                                                                                                                                                                                  @ i
                                                                                                                                                                                                                                                                                                                                                  @ a
                                                                                                                                                                                                                                                                                                                                                  ds5
                                                                                                                                                                                                                                                                                                                                                  dt } } } } }
                                                                                                                              Multilinear.ListTensor.Err msg
                                                                                                                              -> wild2 } }
                                                                                                                    Multilinear.ListTensor.Scalar x
                                                                                                                    -> case w2 of ds3 { DEFAULT ->
                                                                                                                       wild } }) -}
2865e39650f0269bce86f81a7bc8be88
  data Tensor i a
    = Scalar {scalarVal :: !a}
    | Tensor {tensorIndex :: !Multilinear.Index.TIndex i,
              tensorData :: ![Multilinear.ListTensor.Tensor i a]}
    | Err {errMessage :: !GHC.Base.String}
b3a0e41c5426a7d52932228a4aa4ecb8
  _dot ::
    (GHC.Classes.Eq i, GHC.Show.Show i, GHC.Real.Integral i,
     GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,C(U),A)><L,U(U,U,A,A,A,A,A,A,C(U))><L,U(C(U),C(C1(U)),C(U),A,C(U),C(U),C(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Classes.Eq i)
                   (w1 :: GHC.Show.Show i)
                   (w2 :: GHC.Real.Integral i)
                   (w3 :: GHC.Num.Num a) ->
                 Multilinear.ListTensor.$w_dot @ i @ a w1 w2 w3) -}
03f50dccd1617504be47aff3976d65e6
  commonIndex ::
    GHC.Num.Num a =>
    Multilinear.ListTensor.Tensor i a
    -> Multilinear.ListTensor.Tensor i a
    -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 3, Strictness: <L,A><S,1*U><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ i
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.ListTensor.Tensor i a)
                   (w2 :: Multilinear.ListTensor.Tensor i a) ->
                 Multilinear.ListTensor.$wcommonIndex @ a @ i w1 w2) -}
53ba9098a839277589d79e6ffc52f250
  commonIndex_go ::
    [GHC.Base.Maybe GHC.Base.String] -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d36dfe3023bb98cf5712c72dddbb26ce
  errMessage :: Multilinear.ListTensor.Tensor i a -> GHC.Base.String
  RecSel Left Multilinear.ListTensor.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ i @ a (ds3 :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.errMessage} True True} case ds3 of wild {
                                                                                                                    DEFAULT
                                                                                                                    -> Multilinear.ListTensor.errMessage1
                                                                                                                    Multilinear.ListTensor.Err ds4
                                                                                                                    -> ds4 }) -}
507396842c85978733d9e21c74e90a1a
  errMessage1 :: GHC.Base.String
  {- Strictness: x -}
2ba1d1e3c5c7cfc4b3bfda10cce3d19e
  scalarVal :: Multilinear.ListTensor.Tensor i a -> a
  RecSel Left Multilinear.ListTensor.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ i @ a (ds3 :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.scalarVal} True True} case ds3 of wild {
                                                                                                                   DEFAULT
                                                                                                                   -> Multilinear.ListTensor.scalarVal1
                                                                                                                        @ a
                                                                                                                   Multilinear.ListTensor.Scalar ds4
                                                                                                                   -> ds4 }) -}
a95f75eb03277d505564aca92eca58fe
  scalarVal1 :: a
  {- Strictness: x -}
9d1cf0a852ec986cc4c42a493c8253b1
  switchInd ::
    (GHC.Real.Integral i, GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> GHC.Base.Maybe GHC.Base.String
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(1*U,1*U,A,A,A,A,A,A,C(U))><L,A><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Real.Integral i)
                   (w1 :: GHC.Num.Num a)
                   (w2 :: Multilinear.ListTensor.Tensor i a)
                   (w3 :: GHC.Base.Maybe GHC.Base.String) ->
                 Multilinear.ListTensor.$wswitchInd @ i @ a w w2 w3) -}
466ffb18954fcf05deb2653965a62ac0
  switchInd' ::
    (GHC.Real.Integral i, GHC.Num.Num a) =>
    Multilinear.ListTensor.Tensor i a
    -> GHC.Base.Maybe GHC.Base.String
    -> Multilinear.ListTensor.Tensor i a
  {- Arity: 4,
     Strictness: <L,U(U,U,A,A,A,A,A,A,C(U))><L,A><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ i
                   @ a
                   (w :: GHC.Real.Integral i)
                   (w1 :: GHC.Num.Num a)
                   (w2 :: Multilinear.ListTensor.Tensor i a)
                   (w3 :: GHC.Base.Maybe GHC.Base.String) ->
                 Multilinear.ListTensor.$wswitchInd' @ i @ a w w2 w3) -}
3a776713430eb4f87d1134e8e4753663
  switchInd'1 :: Multilinear.Index.TIndex i
  {- Strictness: x -}
583a61cd551cb5820345ee705dd56e98
  switchInd'_$s$wswitchInd' ::
    [GHC.Types.Char]
    -> Multilinear.ListTensor.Tensor i a
    -> GHC.Real.Integral i => Multilinear.ListTensor.Tensor i a
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U(U,U,A,A,A,A,A,A,C(U))> -}
b077f63a02658a74359bbc756a57e66d
  tensorData ::
    Multilinear.ListTensor.Tensor i a
    -> [Multilinear.ListTensor.Tensor i a]
  RecSel Left Multilinear.ListTensor.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ i @ a (ds3 :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.tensorData} True True} case ds3 of wild {
                                                                                                                    DEFAULT
                                                                                                                    -> Multilinear.ListTensor.tensorData1
                                                                                                                         @ i
                                                                                                                         @ a
                                                                                                                    Multilinear.ListTensor.Tensor ds4 ds5
                                                                                                                    -> ds5 }) -}
2c2a50fb7a63bdf8f8fb819e1ea60b1c
  tensorData1 :: [Multilinear.ListTensor.Tensor i a]
  {- Strictness: x -}
cb52e3b0aa46be85695eea1e4304aac9
  tensorIndex ::
    Multilinear.ListTensor.Tensor i a -> Multilinear.Index.TIndex i
  RecSel Left Multilinear.ListTensor.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ i @ a (ds3 :: Multilinear.ListTensor.Tensor i a) ->
                 {__scc {Multilinear-0.1.0.0-E9ARM2QGVFX7aqrS3x5JFU:Multilinear.ListTensor.tensorIndex} True True} case ds3 of wild {
                                                                                                                     DEFAULT
                                                                                                                     -> Multilinear.ListTensor.switchInd'1
                                                                                                                          @ i
                                                                                                                     Multilinear.ListTensor.Tensor ds4 ds5
                                                                                                                     -> ds4 }) -}
instance [safe] Data.Binary.Class.Binary [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fBinaryTensor
instance [safe] GHC.Classes.Eq [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fEqTensor
instance [safe] GHC.Float.Floating [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fFloatingTensor
instance [safe] GHC.Real.Fractional [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fFractionalTensor
instance [safe] GHC.Base.Functor [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fFunctorTensor
instance [safe] Multilinear.Operations.Multilinear [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fMultilinearTensor
instance [safe] GHC.Num.Num [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fNumTensor
instance [safe] GHC.Show.Show [Multilinear.ListTensor.Tensor]
  = Multilinear.ListTensor.$fShowTensor
"SC:$wswitchInd'0" [0] forall @ a
                              @ i
                              (sc :: [GHC.Types.Char])
                              (sc1 :: Multilinear.ListTensor.Tensor i a)
                              (sc2 :: GHC.Real.Integral i)
  Multilinear.ListTensor.$wswitchInd' @ i
                                      @ a
                                      sc2
                                      sc1
                                      (GHC.Base.Just @ GHC.Base.String sc)
  = Multilinear.ListTensor.switchInd'_$s$wswitchInd'
      @ a
      @ i
      sc
      sc1
      sc2
"SC:ds0" [ALWAYS] forall @ a
                         @ i
                         (sc :: Multilinear.Index.TIndex i)
                         (sc1 :: [Multilinear.ListTensor.Tensor i a])
                         (sc2 :: a -> a)
  Multilinear.ListTensor.$fFunctorTensor2 @ i
                                          @ a
                                          @ a
                                          sc2
                                          (Multilinear.ListTensor.Tensor @ i @ a sc sc1)
  = Multilinear.ListTensor.$fFunctorTensor_$sds @ a @ i sc sc1 sc2
"SC:ds0" [ALWAYS] forall @ a
                         @ i
                         (sc :: Multilinear.Index.TIndex i)
                         (sc1 :: [Multilinear.ListTensor.Tensor i a])
  Multilinear.ListTensor.$fMultilinearTensor3 @ i
                                              @ a
                                              (Multilinear.ListTensor.Tensor @ i @ a sc sc1)
  = Multilinear.ListTensor.$fMultilinearTensor_$sds @ a @ i sc sc1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

